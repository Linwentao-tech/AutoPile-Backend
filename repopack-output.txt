This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2025-01-05T16:48:16.109Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitattributes
.github/workflows/develop_autopile.yml
.gitignore
AutoPile.API/appsettings.Development.json
AutoPile.API/appsettings.json
AutoPile.API/AutoPile.API.csproj
AutoPile.API/AutoPile.API.http
AutoPile.API/Controllers/AuthController.cs
AutoPile.API/Controllers/ProductController.cs
AutoPile.API/Controllers/ReviewController.cs
AutoPile.API/Controllers/ShoppingCartItem.cs
AutoPile.API/Mapping/MappingProfile.cs
AutoPile.API/Program.cs
AutoPile.API/Properties/launchSettings.json
AutoPile.API/Validators/OrderItemRequestValidator.cs
AutoPile.API/Validators/OrderItemUpdateValidator.cs
AutoPile.API/Validators/OrderRequestValidator.cs
AutoPile.API/Validators/OrderUpdateValidator.cs
AutoPile.API/Validators/ProductMediaRequestValidator.cs
AutoPile.API/Validators/ProductRequestValidator.cs
AutoPile.API/Validators/ReviewRequestValidator.cs
AutoPile.API/Validators/ReviewUpdateValidator.cs
AutoPile.API/Validators/ShoppingCartItemValidator.cs
AutoPile.API/Validators/UserSigninDTOValidator.cs
AutoPile.API/Validators/ValidateTokenRequestValidator.cs
AutoPile.DATA/AutoPile.DATA.csproj
AutoPile.DATA/Configurations/OrderConfigurations.cs
AutoPile.DATA/Configurations/OrderItemConfigurations.cs
AutoPile.DATA/Configurations/ProductConfigurations.cs
AutoPile.DATA/Configurations/ShoppingCartItemConfigurations.cs
AutoPile.DATA/Data/AutoPileManagementDbContext.cs
AutoPile.DATA/Data/AutoPileMongoDbContext.cs
AutoPile.DATA/Exceptions/AbstractHTTPexception.cs
AutoPile.DATA/Exceptions/BadRequestException.cs
AutoPile.DATA/Exceptions/NotFoundException.cs
AutoPile.DATA/Exceptions/UnauthorizedException.cs
AutoPile.DATA/Middlewares/ExceptionHandlingMiddleware.cs
AutoPile.DATA/Middlewares/UserIdExtractMiddleware.cs
AutoPile.DATA/Migrations/20241227180443_InitialCreate.cs
AutoPile.DATA/Migrations/20241227180443_InitialCreate.Designer.cs
AutoPile.DATA/Migrations/20241229055646_AddEmailVerifyTokenCreatedAt.cs
AutoPile.DATA/Migrations/20241229055646_AddEmailVerifyTokenCreatedAt.Designer.cs
AutoPile.DATA/Migrations/AutoPileManagementDbContextModelSnapshot.cs
AutoPile.DOMAIN/AutoPile.DOMAIN.csproj
AutoPile.DOMAIN/DTOs/Requests/OrderCreateDTO.cs
AutoPile.DOMAIN/DTOs/Requests/OrderItemCreateDTO.cs
AutoPile.DOMAIN/DTOs/Requests/OrderItemUpdateDTO.cs
AutoPile.DOMAIN/DTOs/Requests/OrderUpdateDTO.cs
AutoPile.DOMAIN/DTOs/Requests/ProductCreateDTO.cs
AutoPile.DOMAIN/DTOs/Requests/ProductMediaCreateDTO.cs
AutoPile.DOMAIN/DTOs/Requests/ProductMediaUpdateDTO.cs
AutoPile.DOMAIN/DTOs/Requests/ProductUpdateDTO.cs
AutoPile.DOMAIN/DTOs/Requests/ReviewCreateDTO.cs
AutoPile.DOMAIN/DTOs/Requests/ReviewUpdateDTO.cs
AutoPile.DOMAIN/DTOs/Requests/ShoppingCartItemRequestDTO.cs
AutoPile.DOMAIN/DTOs/Requests/UserResetPasswordDTO.cs
AutoPile.DOMAIN/DTOs/Requests/UserSigninDTO.cs
AutoPile.DOMAIN/DTOs/Requests/UserSignupDTO.cs
AutoPile.DOMAIN/DTOs/Requests/UserUpdateInfoDTO.cs
AutoPile.DOMAIN/DTOs/Requests/ValidateTokenRequest.cs
AutoPile.DOMAIN/DTOs/Responses/OrderItemResponseDTO.cs
AutoPile.DOMAIN/DTOs/Responses/OrderResponseDTO.cs
AutoPile.DOMAIN/DTOs/Responses/ProductMediaResponseDTO.cs
AutoPile.DOMAIN/DTOs/Responses/ProductResponseDTO.cs
AutoPile.DOMAIN/DTOs/Responses/ReviewImageDTO.cs
AutoPile.DOMAIN/DTOs/Responses/ReviewResponseDTO.cs
AutoPile.DOMAIN/DTOs/Responses/ShoppingCartItemResponseDTO.cs
AutoPile.DOMAIN/DTOs/Responses/UserInfoResponseDTO.cs
AutoPile.DOMAIN/DTOs/Responses/UserResponseDTO.cs
AutoPile.DOMAIN/Enum/Category.cs
AutoPile.DOMAIN/Enum/Ribbon.cs
AutoPile.DOMAIN/Interface/IAuthService.cs
AutoPile.DOMAIN/Interface/IBlobService.cs
AutoPile.DOMAIN/Interface/IExceptionHandler.cs
AutoPile.DOMAIN/Interface/IJwtTokenGenerator.cs
AutoPile.DOMAIN/Interface/IProductService.cs
AutoPile.DOMAIN/Interface/IReviewService.cs
AutoPile.DOMAIN/Interface/IShoppingCartItemService.cs
AutoPile.DOMAIN/Models/ApiResponse.cs
AutoPile.DOMAIN/Models/Entities/ApplicationRole.cs
AutoPile.DOMAIN/Models/Entities/ApplicationUser.cs
AutoPile.DOMAIN/Models/Entities/Order.cs
AutoPile.DOMAIN/Models/Entities/OrderItem.cs
AutoPile.DOMAIN/Models/Entities/Product.cs
AutoPile.DOMAIN/Models/Entities/ProductMedia.cs
AutoPile.DOMAIN/Models/Entities/Review.cs
AutoPile.DOMAIN/Models/Entities/ShoppingCartItem.cs
AutoPile.SERVICE/AutoPile.SERVICE.csproj
AutoPile.SERVICE/Services/AuthService.cs
AutoPile.SERVICE/Services/BlobService.cs
AutoPile.SERVICE/Services/ProductService.cs
AutoPile.SERVICE/Services/ReviewService.cs
AutoPile.SERVICE/Services/ShoppingCartItemService.cs
AutoPile.SERVICE/Utilities/EmailConfirmationHtmlTemplates.cs
AutoPile.SERVICE/Utilities/JwtTokenGenerator.cs
AutoPile.sln

================================================================
Repository Files
================================================================

================
File: .gitattributes
================
###############################################################################
# Set default behavior to automatically normalize line endings.
###############################################################################
* text=auto

###############################################################################
# Set default behavior for command prompt diff.
#
# This is need for earlier builds of msysgit that does not have it on by
# default for csharp files.
# Note: This is only used by command line
###############################################################################
#*.cs     diff=csharp

###############################################################################
# Set the merge driver for project and solution files
#
# Merging from the command prompt will add diff markers to the files if there
# are conflicts (Merging from VS is not affected by the settings below, in VS
# the diff markers are never inserted). Diff markers may cause the following 
# file extensions to fail to load in VS. An alternative would be to treat
# these files as binary and thus will always conflict and require user
# intervention with every merge. To do so, just uncomment the entries below
###############################################################################
#*.sln       merge=binary
#*.csproj    merge=binary
#*.vbproj    merge=binary
#*.vcxproj   merge=binary
#*.vcproj    merge=binary
#*.dbproj    merge=binary
#*.fsproj    merge=binary
#*.lsproj    merge=binary
#*.wixproj   merge=binary
#*.modelproj merge=binary
#*.sqlproj   merge=binary
#*.wwaproj   merge=binary

###############################################################################
# behavior for image files
#
# image files are treated as binary by default.
###############################################################################
#*.jpg   binary
#*.png   binary
#*.gif   binary

###############################################################################
# diff behavior for common document formats
# 
# Convert binary document formats to text before diffing them. This feature
# is only available from the command line. Turn it on by uncommenting the 
# entries below.
###############################################################################
#*.doc   diff=astextplain
#*.DOC   diff=astextplain
#*.docx  diff=astextplain
#*.DOCX  diff=astextplain
#*.dot   diff=astextplain
#*.DOT   diff=astextplain
#*.pdf   diff=astextplain
#*.PDF   diff=astextplain
#*.rtf   diff=astextplain
#*.RTF   diff=astextplain

================
File: .github/workflows/develop_autopile.yml
================
# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy ASP.Net Core app to Azure Web App - autopile

on:
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o "${{env.DOTNET_ROOT}}/myapp"

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  deploy:
    runs-on: windows-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_1CE5E3003D9D428EA66DB6AC8156663A }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_F8DC20B16B3644CE8C44A3EE9C8F2AFC }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_48D166C832774A309250D8DDBE893E48 }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'autopile'
          slot-name: 'Production'
          package: .

================
File: .gitignore
================
## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.
##
## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore

# User-specific files
*.rsuser
*.suo
*.user
*.userosscache
*.sln.docstates

# User-specific files (MonoDevelop/Xamarin Studio)
*.userprefs

# Mono auto generated files
mono_crash.*

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
[Ww][Ii][Nn]32/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
bld/
[Bb]in/
[Oo]bj/
[Oo]ut/
[Ll]og/
[Ll]ogs/

# Visual Studio 2015/2017 cache/options directory
.vs/
# Uncomment if you have tasks that create the project's static files in wwwroot
#wwwroot/

# Visual Studio 2017 auto generated files
Generated\ Files/

# MSTest test Results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

# NUnit
*.VisualState.xml
TestResult.xml
nunit-*.xml

# Build Results of an ATL Project
[Dd]ebugPS/
[Rr]eleasePS/
dlldata.c

# Benchmark Results
BenchmarkDotNet.Artifacts/

# .NET Core
project.lock.json
project.fragment.lock.json
artifacts/

# ASP.NET Scaffolding
ScaffoldingReadMe.txt

# StyleCop
StyleCopReport.xml

# Files built by Visual Studio
*_i.c
*_p.c
*_h.h
*.ilk
*.meta
*.obj
*.iobj
*.pch
*.pdb
*.ipdb
*.pgc
*.pgd
*.rsp
*.sbr
*.tlb
*.tli
*.tlh
*.tmp
*.tmp_proj
*_wpftmp.csproj
*.log
*.vspscc
*.vssscc
.builds
*.pidb
*.svclog
*.scc

# Chutzpah Test files
_Chutzpah*

# Visual C++ cache files
ipch/
*.aps
*.ncb
*.opendb
*.opensdf
*.sdf
*.cachefile
*.VC.db
*.VC.VC.opendb

# Visual Studio profiler
*.psess
*.vsp
*.vspx
*.sap

# Visual Studio Trace Files
*.e2e

# TFS 2012 Local Workspace
$tf/

# Guidance Automation Toolkit
*.gpState

# ReSharper is a .NET coding add-in
_ReSharper*/
*.[Rr]e[Ss]harper
*.DotSettings.user

# TeamCity is a build add-in
_TeamCity*

# DotCover is a Code Coverage Tool
*.dotCover

# AxoCover is a Code Coverage Tool
.axoCover/*
!.axoCover/settings.json

# Coverlet is a free, cross platform Code Coverage Tool
coverage*.json
coverage*.xml
coverage*.info

# Visual Studio code coverage results
*.coverage
*.coveragexml

# NCrunch
_NCrunch_*
.*crunch*.local.xml
nCrunchTemp_*

# MightyMoose
*.mm.*
AutoTest.Net/

# Web workbench (sass)
.sass-cache/

# Installshield output folder
[Ee]xpress/

# DocProject is a documentation generator add-in
DocProject/buildhelp/
DocProject/Help/*.HxT
DocProject/Help/*.HxC
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/Html2
DocProject/Help/html

# Click-Once directory
publish/

# Publish Web Output
*.[Pp]ublish.xml
*.azurePubxml
# Note: Comment the next line if you want to checkin your web deploy settings,
# but database connection strings (with potential passwords) will be unencrypted
*.pubxml
*.publishproj

# Microsoft Azure Web App publish settings. Comment the next line if you want to
# checkin your Azure Web App publish settings, but sensitive information contained
# in these scripts will be unencrypted
PublishScripts/

# NuGet Packages
*.nupkg
# NuGet Symbol Packages
*.snupkg
# The packages folder can be ignored because of Package Restore
**/[Pp]ackages/*
# except build/, which is used as an MSBuild target.
!**/[Pp]ackages/build/
# Uncomment if necessary however generally it will be regenerated when needed
#!**/[Pp]ackages/repositories.config
# NuGet v3's project.json files produces more ignorable files
*.nuget.props
*.nuget.targets

# Microsoft Azure Build Output
csx/
*.build.csdef

# Microsoft Azure Emulator
ecf/
rcf/

# Windows Store app package directories and files
AppPackages/
BundleArtifacts/
Package.StoreAssociation.xml
_pkginfo.txt
*.appx
*.appxbundle
*.appxupload

# Visual Studio cache files
# files ending in .cache can be ignored
*.[Cc]ache
# but keep track of directories ending in .cache
!?*.[Cc]ache/

# Others
ClientBin/
~$*
*~
*.dbmdl
*.dbproj.schemaview
*.jfm
*.pfx
*.publishsettings
orleans.codegen.cs

# Including strong name files can present a security risk
# (https://github.com/github/gitignore/pull/2483#issue-259490424)
#*.snk

# Since there are multiple workflows, uncomment next line to ignore bower_components
# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)
#bower_components/

# RIA/Silverlight projects
Generated_Code/

# Backup & report files from converting an old project file
# to a newer Visual Studio version. Backup files are not needed,
# because we have git ;-)
_UpgradeReport_Files/
Backup*/
UpgradeLog*.XML
UpgradeLog*.htm
ServiceFabricBackup/
*.rptproj.bak

# SQL Server files
*.mdf
*.ldf
*.ndf

# Business Intelligence projects
*.rdl.data
*.bim.layout
*.bim_*.settings
*.rptproj.rsuser
*- [Bb]ackup.rdl
*- [Bb]ackup ([0-9]).rdl
*- [Bb]ackup ([0-9][0-9]).rdl

# Microsoft Fakes
FakesAssemblies/

# GhostDoc plugin setting file
*.GhostDoc.xml

# Node.js Tools for Visual Studio
.ntvs_analysis.dat
node_modules/

# Visual Studio 6 build log
*.plg

# Visual Studio 6 workspace options file
*.opt

# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)
*.vbw

# Visual Studio LightSwitch build output
**/*.HTMLClient/GeneratedArtifacts
**/*.DesktopClient/GeneratedArtifacts
**/*.DesktopClient/ModelManifest.xml
**/*.Server/GeneratedArtifacts
**/*.Server/ModelManifest.xml
_Pvt_Extensions

# Paket dependency manager
.paket/paket.exe
paket-files/

# FAKE - F# Make
.fake/

# CodeRush personal settings
.cr/personal

# Python Tools for Visual Studio (PTVS)
__pycache__/
*.pyc

# Cake - Uncomment if you are using it
# tools/**
# !tools/packages.config

# Tabs Studio
*.tss

# Telerik's JustMock configuration file
*.jmconfig

# BizTalk build output
*.btp.cs
*.btm.cs
*.odx.cs
*.xsd.cs

# OpenCover UI analysis results
OpenCover/

# Azure Stream Analytics local run output
ASALocalRun/

# MSBuild Binary and Structured Log
*.binlog

# NVidia Nsight GPU debugger configuration file
*.nvuser

# MFractors (Xamarin productivity tool) working folder
.mfractor/

# Local History for Visual Studio
.localhistory/

# BeatPulse healthcheck temp database
healthchecksdb

# Backup folder for Package Reference Convert tool in Visual Studio 2017
MigrationBackup/

# Ionide (cross platform F# VS Code tools) working folder
.ionide/

# Fody - auto-generated XML schema
FodyWeavers.xsd

================
File: AutoPile.API/appsettings.Development.json
================
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": { "DefaultConnection": "Server=localhost;Database=autopileDb;Trusted_Connection=True;TrustServerCertificate=True;Encrypt=false;Integrated Security=True;" },
  "MongoDb": {
    "ConnectionStrings": "mongodb+srv://wlin228:134679Zxc...@autopile.aqz1d.mongodb.net/?retryWrites=true&w=majority&appName=autopile",
    "DatabaseName": "AutoPileDb"
  },
  "Jwt": {
    "Key": "52fc3995983c6304f896a7f0f0949364c57fd79445fcfda418b5a5f9ba5e5e9140af52382607fa55af4208fb0c1fbf1976e4426a6ed670cea65141772dafcff125c463f64284dac96e22ef9534a6530a02f0e9d440ff27905f65bdaabfafde1f2ee38ad82c05702e8ff9656c065c6773e6d6ee83c44b20e0e4f09171b139a51b9a65d679ff1f48710f7094cad0aa8c570ca2acd4008725aee0330774f35582d5a44c2291b47ebba9e260e6862e4a82aab82f5dc2b45df4f81b8b8a04fc149d199cb3c9fdb622594dde64d2c560a01a6a42d6e260578180b1a6955a7d950967a67c0c063ce601c250b438c27475045a06f3165ad93083d0a39c156d5959d61e7c",
    "Issuer": "https://localhost:7249",
    "Audience": "https://localhost:7249"
  },
  "Resend": {
    "ApiKey": "re_FFu4XttH_747FDbLnWmRucksFtEWpvteb"
  },
  "Domain": "https://localhost:7249"
}

================
File: AutoPile.API/appsettings.json
================
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {
    "DefaultConnection": "",
    "MongoDb": {
      "ConnectionStrings": "",
      "DatabaseName": "AutoPileDb"
    }
  }
}

================
File: AutoPile.API/AutoPile.API.csproj
================
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
  </PropertyGroup>

  <ItemGroup>
    <Compile Remove="NewFolder\**" />
    <Content Remove="NewFolder\**" />
    <EmbeddedResource Remove="NewFolder\**" />
    <None Remove="NewFolder\**" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="AutoMapper" Version="13.0.1" />
    <PackageReference Include="FluentValidation" Version="11.11.0" />
    <PackageReference Include="FluentValidation.AspNetCore" Version="11.3.0" />
    <PackageReference Include="FluentValidation.DependencyInjectionExtensions" Version="11.11.0" />
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="9.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Design" Version="8.0.10">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Swashbuckle.AspNetCore" Version="7.2.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\AutoPile.SERVICE\AutoPile.SERVICE.csproj" />
  </ItemGroup>

</Project>

================
File: AutoPile.API/AutoPile.API.http
================
@AutoPile.API_HostAddress = http://localhost:5104

GET {{AutoPile.API_HostAddress}}/weatherforecast/
Accept: application/json

###

================
File: AutoPile.API/Controllers/AuthController.cs
================
using AutoPile.DOMAIN.DTOs.Requests;
using AutoPile.DOMAIN.DTOs.Responses;
using AutoPile.DOMAIN.Models;
using AutoPile.DOMAIN.Models.Entities;
using AutoPile.SERVICE.Services;
using AutoPile.SERVICE.Utilities;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;

namespace AutoPile.API.Controllers
{
    /// <summary>
    /// Controller for handling user authentication and account management
    /// </summary>
    [Route("[controller]")]
    [ApiController]
    public class AuthController : ControllerBase
    {
        private readonly IAuthService _authService;

        /// <summary>
        /// Initializes a new instance of the AuthController
        /// </summary>
        /// <param name="authService">The authentication service</param>
        public AuthController(IAuthService authService)
        {
            _authService = authService;
        }

        /// <summary>
        /// Registers a new user
        /// </summary>
        /// <param name="userSignupDTO">The user registration information</param>
        /// <returns>The newly created user information</returns>
        /// <response code="200">Returns the newly created user</response>
        /// <response code="400">If the registration information is invalid</response>
        [HttpPost("SignupUser", Name = "SignupUser")]
        public async Task<IActionResult> SignupUser([FromBody] UserSignupDTO userSignupDTO)
        {
            var userResponseDTO = await _authService.SignupUserAsync(userSignupDTO);
            return ApiResponse<UserResponseDTO>.OkResult(userResponseDTO);
        }

        [HttpPost("SignupAdmin", Name = "SignupAdmin")]
        public async Task<IActionResult> SignupAdmin([FromBody] UserSignupDTO userSignupDTO)
        {
            var userResponseDTO = await _authService.SignupAdminAsync(userSignupDTO);
            return ApiResponse<UserResponseDTO>.OkResult(userResponseDTO);
        }

        /// <summary>
        /// Authenticates a user and returns a JWT token
        /// </summary>
        /// <param name="userSigninDTO">The user login credentials</param>
        /// <returns>User information and authentication token</returns>
        /// <response code="200">Returns the user information and token</response>
        /// <response code="400">If the credentials are invalid</response>
        [HttpPost("Signin", Name = "Signin")]
        public async Task<IActionResult> Signin([FromBody] UserSigninDTO userSigninDTO)
        {
            var userResponseDTO = await _authService.SigninAsync(userSigninDTO);
            return ApiResponse<UserResponseDTO>.OkResult(userResponseDTO);
        }

        /// <summary>
        /// Retrieves the current user's information
        /// </summary>
        /// <returns>Detailed user information</returns>
        /// <response code="200">Returns the user information</response>
        /// <response code="401">If the user is not authorized</response>
        /// <response code="404">If the user is not found</response>
        [HttpGet("GetUserInfoById", Name = "GetUserInfoById")]
        [Authorize(Roles = "User")]
        public async Task<IActionResult> GetUserInfoById()
        {
            var userId = HttpContext.Items["UserId"]?.ToString();
            var userInfoResponseDTO = await _authService.GetUserInfoAsync(userId);
            return ApiResponse<UserInfoResponseDTO>.OkResult(userInfoResponseDTO);
        }

        /// <summary>
        /// Sends an email confirmation link to the specified email address
        /// </summary>
        /// <param name="email">The email address to send the confirmation link to</param>
        /// <returns>A confirmation token</returns>
        /// <response code="200">Returns the confirmation token</response>
        /// <response code="401">If the user is not authorized</response>
        /// <response code="400">If the email is invalid</response>
        [HttpGet("SendEmailConfirmationLink", Name = "SendEmailConfirmationLink")]
        [Authorize(Roles = "User")]
        public async Task<IActionResult> SendEmailConfirmationLink([FromQuery] string email)
        {
            var userId = HttpContext.Items["UserId"]?.ToString();
            var token = await _authService.SendEmailConfirmationTokenAsync(email, userId);
            return ApiResponse<object>.OkResult(new { token });
        }

        /// <summary>
        /// Verifies an email confirmation token
        /// </summary>
        /// <param name="token">The confirmation token</param>
        /// <param name="email">The email address to verify</param>
        /// <returns>HTML response indicating verification status</returns>
        /// <response code="200">Returns HTML confirmation page</response>
        /// <response code="400">If the token or email is invalid</response>
        [HttpGet("VerifyEmailConfirmationLink", Name = "VerifyEmailConfirmationLink")]
        public async Task<IActionResult> VerifyEmailConfirmationLink([FromQuery] string token, [FromQuery] string email)
        {
            var isValid = await _authService.VerifyEmailConfirmationTokenAsync(token, email);
            return Content(EmailConfirmationHtmlTemplates.GetEmailConfirmationHtml(isValid), "text/html");
        }

        /// <summary>
        /// Updates the current user's information
        /// </summary>
        /// <param name="userUpdateInfoDTO">The updated user information</param>
        /// <returns>A success message</returns>
        /// <response code="200">If the update was successful</response>
        /// <response code="401">If the user is not authorized</response>
        /// <response code="400">If the update information is invalid</response>
        [HttpPut("UpdateUserInfo", Name = "UpdateUserInfo")]
        [Authorize(Roles = "User")]
        public async Task<IActionResult> UpdateUserInfo([FromBody] UserUpdateInfoDTO userUpdateInfoDTO)
        {
            var userId = HttpContext.Items["UserId"]?.ToString();
            await _authService.UpdateUserInfoAsync(userUpdateInfoDTO, userId);
            return ApiResponse.OkResult("User info successfully updated");
        }

        /// <summary>
        /// Sends a password reset token to the specified email address
        /// </summary>
        /// <param name="email">The email address to send the reset token to</param>
        /// <returns>A reset token</returns>
        /// <response code="200">Returns the reset token</response>
        /// <response code="401">If the user is not authorized</response>
        /// <response code="400">If the email is invalid</response>
        [HttpGet("SendResetPasswordToken", Name = "SendResetPasswordToken")]
        public async Task<IActionResult> SendResetPasswordToken([FromQuery] string email)
        {
            var token = await _authService.SendResetPasswordTokenAsync(email);
            return ApiResponse<object>.OkResult(new { token });
        }

        /// <summary>
        /// Resets a user's password using a reset token
        /// </summary>
        /// <param name="userResetPasswordDTO">The password reset information including the new password</param>
        /// <returns>A success message</returns>
        /// <response code="200">If the password was successfully reset</response>
        /// <response code="400">If the reset information is invalid</response>
        [HttpPost("ResetPassword", Name = "ResetPassword")]
        public async Task<IActionResult> ResetPassword([FromBody] UserResetPasswordDTO userResetPasswordDTO)
        {
            await _authService.ResetPasswordAsync(userResetPasswordDTO);
            return ApiResponse.OkResult("Password successfully reset");
        }

        /// <summary>
        /// Validates a password reset token
        /// </summary>
        /// <param name="validateTokenRequest">The token validation request containing email and token</param>
        /// <returns>A success message if the token is valid</returns>
        /// <response code="200">If the token is valid</response>
        /// <response code="400">If the token is invalid or expired</response>
        [HttpPost("ValidatePasswordResetToken", Name = "ValidatePasswordResetTokenAsync")]
        public async Task<IActionResult> ValidatePasswordResetToken([FromBody] ValidateTokenRequest validateTokenRequest)
        {
            await _authService.ValidatePasswordResetTokenAsync(validateTokenRequest.Email, validateTokenRequest.Token);
            return ApiResponse.OkResult("Token successfully validate");
        }
    }
}

================
File: AutoPile.API/Controllers/ProductController.cs
================
using AutoPile.DOMAIN.DTOs.Requests;
using AutoPile.DOMAIN.DTOs.Responses;
using AutoPile.DOMAIN.Models;
using AutoPile.SERVICE.Services;
using Microsoft.AspNetCore.Mvc;

namespace AutoPile.API.Controllers
{
    /// <summary>
    /// Controller for managing product operations
    /// </summary>
    [Route("[controller]")]
    [ApiController]
    public class ProductController : ControllerBase
    {
        private readonly IProductService _productService;

        /// <summary>
        /// Initializes a new instance of the ProductController
        /// </summary>
        /// <param name="productService">The product service for handling business logic</param>
        public ProductController(IProductService productService)
        {
            _productService = productService;
        }

        /// <summary>
        /// Creates a new product
        /// </summary>
        /// <param name="productCreateDTO">The product details to create</param>
        /// <returns>The newly created product</returns>
        /// <response code="200">Returns the newly created product</response>
        /// <response code="400">If the product data is invalid or SKU already exists</response>
        [HttpPost("CreateProduct", Name = "CreateProduct")]
        public async Task<IActionResult> CreateProductAsync([FromBody] ProductCreateDTO productCreateDTO)
        {
            var productResponseDTO = await _productService.CreateProductAsync(productCreateDTO);
            return ApiResponse<ProductResponseDTO>.OkResult(productResponseDTO);
        }

        /// <summary>
        /// Retrieves a specific product by its ID
        /// </summary>
        /// <param name="id">The ID of the product to retrieve</param>
        /// <returns>The requested product</returns>
        /// <response code="200">Returns the requested product</response>
        /// <response code="400">If the product ID format is invalid</response>
        /// <response code="404">If the product is not found</response>
        [HttpGet("{id}", Name = "GetProductById")]
        public async Task<IActionResult> GetProductById(string id)
        {
            var product = await _productService.GetProductByIdAsync(id);
            return ApiResponse<ProductResponseDTO>.OkResult(product);
        }

        /// <summary>
        /// Deletes a specific product
        /// </summary>
        /// <param name="id">The ID of the product to delete</param>
        /// <returns>No content</returns>
        /// <response code="204">If the product was successfully deleted</response>
        /// <response code="400">If the product ID format is invalid</response>
        /// <response code="404">If the product is not found</response>
        [HttpDelete("{id}", Name = "DeleteProductById")]
        public async Task<IActionResult> DeleteProductById(string id)
        {
            await _productService.DeleteProductByIdAsync(id);
            return NoContent();
        }

        /// <summary>
        /// Updates a specific product
        /// </summary>
        /// <param name="productUpdateDTO">The updated product data</param>
        /// <param name="id">The ID of the product to update</param>
        /// <returns>The updated product</returns>
        /// <remarks>
        /// This is a partial update - only the provided fields will be updated.
        /// Fields that are not included in the request will retain their existing values.
        /// </remarks>
        /// <response code="200">Returns the updated product</response>
        /// <response code="400">If the product ID format is invalid or update data is invalid</response>
        /// <response code="404">If the product is not found</response>
        [HttpPatch("{id}", Name = "UpdateProductById")]
        public async Task<IActionResult> UpdateProductById([FromBody] ProductUpdateDTO productUpdateDTO, string id)
        {
            var product = await _productService.UpdateProductByIdAsync(productUpdateDTO, id);
            return ApiResponse<ProductResponseDTO>.OkResult(product);
        }
    }
}

================
File: AutoPile.API/Controllers/ReviewController.cs
================
using AutoPile.DOMAIN.DTOs.Requests;
using AutoPile.DOMAIN.DTOs.Responses;
using AutoPile.DOMAIN.Models;
using AutoPile.SERVICE.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using MongoDB.Bson;

namespace AutoPile.API.Controllers
{
    /// <summary>
    /// Controller for managing product reviews
    /// </summary>
    [Route("[controller]")]
    [ApiController]
    public class ReviewController : ControllerBase
    {
        private readonly IReviewService _reviewService;
        private readonly ILogger<ReviewController> _logger;

        /// <summary>
        /// Initializes a new instance of the ReviewController
        /// </summary>
        /// <param name="reviewService">The review service for handling business logic</param>
        /// <param name="logger">The logger for recording operations</param>
        public ReviewController(IReviewService reviewService, ILogger<ReviewController> logger)
        {
            _reviewService = reviewService;
            _logger = logger;
        }

        /// <summary>
        /// Creates a new product review
        /// </summary>
        /// <param name="reviewCreateDTO">The review details to create</param>
        /// <returns>The newly created review</returns>
        /// <response code="200">Returns the newly created review</response>
        /// <response code="400">If the review data is invalid</response>
        /// <response code="401">If the user is not authenticated</response>
        [HttpPost("CreateReview", Name = "CreateReview")]
        [Authorize(Roles = "User")]
        public async Task<IActionResult> CreateReview(ReviewCreateDTO reviewCreateDTO)
        {
            try
            {
                var userId = HttpContext.Items["UserId"]?.ToString();
                _logger.LogInformation($"Attempting to create review with userId: {userId}");

                var responseReviewDTO = await _reviewService.CreateReviewAsync(reviewCreateDTO, userId);
                _logger.LogInformation($"Review created successfully with ID {responseReviewDTO.Id}");

                return ApiResponse<ReviewResponseDTO>.OkResult(responseReviewDTO);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error creating review");
                throw;
            }
        }

        /// <summary>
        /// Retrieves a specific review by its ID
        /// </summary>
        /// <param name="Id">The ID of the review to retrieve</param>
        /// <returns>The requested review</returns>
        /// <response code="200">Returns the requested review</response>
        /// <response code="404">If the review is not found</response>
        [HttpGet("GetReviewById", Name = "GetReviewById")]
        public async Task<IActionResult> GetReviewById(string Id)
        {
            var responseReviewDTO = await _reviewService.GetReviewByIdAsync(Id);
            _logger.LogInformation("Successfully retrieved review {ReviewId}", Id);
            return ApiResponse<ReviewResponseDTO>.OkResult(responseReviewDTO);
        }

        /// <summary>
        /// Retrieves all reviews for a specific product
        /// </summary>
        /// <param name="productId">The ID of the product to get reviews for</param>
        /// <returns>A collection of reviews for the specified product</returns>
        /// <response code="200">Returns the list of reviews</response>
        /// <response code="404">If the product is not found</response>
        [HttpGet("GetReviewByProductId", Name = "GetReviewByProductId")]
        public async Task<IActionResult> GetReviewsByProductId(string productId)
        {
            var responseReviewDTO = await _reviewService.GetReviewsByProductIdAsync(productId);
            _logger.LogInformation("Successfully retrieved {Count} reviews for product {ProductId}",
                   responseReviewDTO?.Count() ?? 0, productId);
            return ApiResponse<IEnumerable<ReviewResponseDTO>>.OkResult(responseReviewDTO);
        }

        /// <summary>
        /// Updates an existing review
        /// </summary>
        /// <param name="reviewUpdateDTO">The updated review data</param>
        /// <param name="id">The ID of the review to update</param>
        /// <returns>The updated review</returns>
        /// <response code="200">Returns the updated review</response>
        /// <response code="400">If the update data is invalid</response>
        /// <response code="401">If the user is not authenticated</response>
        /// <response code="403">If the user is not authorized to update the review</response>
        /// <response code="404">If the review is not found</response>
        [HttpPatch("{id}", Name = "UpdateReviewByReviewId")]
        [Authorize(Roles = "User")]
        public async Task<IActionResult> UpdateReview(ReviewUpdateDTO reviewUpdateDTO, string id)
        {
            var userId = HttpContext.Items["UserId"]?.ToString();
            var response = await _reviewService.UpdateReviewAsync(reviewUpdateDTO, id, userId);
            _logger.LogInformation("Successfully updated review {ReviewId}", id);
            return ApiResponse<ReviewResponseDTO>.OkResult(response, "Resource updated successfully");
        }

        /// <summary>
        /// Deletes a specific review
        /// </summary>
        /// <param name="id">The ID of the review to delete</param>
        /// <returns>No content</returns>
        /// <response code="204">If the review was successfully deleted</response>
        /// <response code="401">If the user is not authenticated</response>
        /// <response code="403">If the user is not authorized to delete the review</response>
        /// <response code="404">If the review is not found</response>
        [HttpDelete("{id}", Name = "DeleteReviewByReviewId")]
        [Authorize(Roles = "User")]
        public async Task<IActionResult> DeleteReview(string id)
        {
            var userId = HttpContext.Items["UserId"]?.ToString();
            await _reviewService.DeleteReviewAsync(id, userId);
            _logger.LogInformation("Successfully deleted review {ReviewId}", id);
            return NoContent();
        }
    }
}

================
File: AutoPile.API/Controllers/ShoppingCartItem.cs
================
using AutoPile.DOMAIN.DTOs.Requests;
using AutoPile.DOMAIN.DTOs.Responses;
using AutoPile.DOMAIN.Models;
using AutoPile.DOMAIN.Models.Entities;
using AutoPile.SERVICE.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using System.Security.Claims;

namespace AutoPile.API.Controllers
{
    /// <summary>
    /// Controller for managing shopping cart items
    /// </summary>
    [Route("[controller]")]
    [ApiController]
    public class ShoppingCartItemController : ControllerBase
    {
        private readonly IShoppingCartItemService _shoppingCartItemService;
        private readonly ILogger<ShoppingCartItem> _logger;

        /// <summary>
        /// Initializes a new instance of the ShoppingCartItemController
        /// </summary>
        /// <param name="shoppingCartItemService">The shopping cart item service</param>
        /// <param name="logger">The logger instance</param>
        public ShoppingCartItemController(IShoppingCartItemService shoppingCartItemService, ILogger<ShoppingCartItem> logger)
        {
            _logger = logger;
            _shoppingCartItemService = shoppingCartItemService;
        }

        /// <summary>
        /// Retrieves a specific shopping cart item by its ID
        /// </summary>
        /// <param name="id">The ID of the shopping cart item to retrieve</param>
        /// <returns>The shopping cart item details</returns>
        /// <response code="200">Returns the shopping cart item</response>
        /// <response code="404">If the item is not found</response>
        /// <response code="401">If the user is not authorized</response>
        [HttpGet("{id}", Name = "GetShoppingCartItemById")]
        [Authorize(Roles = "User")]
        public async Task<IActionResult> GetShoppingCartItemById(int id)
        {
            var userId = HttpContext.Items["UserId"]?.ToString();
            var shoppingCartItemResponseDTO = await _shoppingCartItemService.GetShoppingCartItemById(id, userId);
            _logger.LogInformation("Shopping Cart Item retrieved successfully:{ShoppingCartItem}", shoppingCartItemResponseDTO);
            return ApiResponse<ShoppingCartItemResponseDTO>.OkResult(shoppingCartItemResponseDTO);
        }

        /// <summary>
        /// Creates a new shopping cart item
        /// </summary>
        /// <param name="shoppingCartItemResponseDTO">The shopping cart item information</param>
        /// <returns>The newly created shopping cart item</returns>
        /// <response code="200">Returns the newly created item</response>
        /// <response code="400">If the item is invalid</response>
        /// <response code="401">If the user is not authorized</response>
        [HttpPost("AddShoppingCartItem", Name = "AddShoppingCartItem")]
        [Authorize(Roles = "User")]
        public async Task<IActionResult> CreateShoppingCartItem([FromBody] ShoppingCartItemRequestDto shoppingCartItemResponseDTO)
        {
            var userId = HttpContext.Items["UserId"]?.ToString();
            var shoppingCartItem = await _shoppingCartItemService.CreateShoppingCartItemAsync(shoppingCartItemResponseDTO, userId);
            _logger.LogInformation("Shopping Cart Item created successfully:{ShoppingCartItem}", shoppingCartItem);
            return ApiResponse<ShoppingCartItemResponseDTO>.OkResult(shoppingCartItem);
        }

        /// <summary>
        /// Deletes a specific shopping cart item
        /// </summary>
        /// <param name="id">The ID of the shopping cart item to delete</param>
        /// <returns>No content</returns>
        /// <response code="204">If the item was successfully deleted</response>
        /// <response code="404">If the item is not found</response>
        /// <response code="401">If the user is not authorized</response>
        [HttpDelete("{id}", Name = "DeleteShoppingCartItem")]
        [Authorize(Roles = "User")]
        public async Task<IActionResult> DeleteShoppingCartItem(int id)
        {
            var userId = HttpContext.Items["UserId"]?.ToString();
            await _shoppingCartItemService.DeleteShoppingCartItemAsync(id, userId);
            _logger.LogInformation("Shopping Cart Item deleted successfully with Id {id}", id);
            return NoContent();
        }

        /// <summary>
        /// Updates a specific shopping cart item
        /// </summary>
        /// <param name="updateShoppingCartItemDto">The updated shopping cart item information</param>
        /// <param name="id">The ID of the shopping cart item to update</param>
        /// <returns>A success message</returns>
        /// <response code="200">If the item was successfully updated</response>
        /// <response code="400">If the update information is invalid</response>
        /// <response code="404">If the item is not found</response>
        /// <response code="401">If the user is not authorized</response>
        [HttpPatch("{id}", Name = "UpdateShoppingCartItem")]
        [Authorize(Roles = "User")]
        public async Task<IActionResult> UpdateShoppingCartItem([FromBody] UpdateShoppingCartItemDto updateShoppingCartItemDto, int id)
        {
            var userId = HttpContext.Items["UserId"]?.ToString();
            await _shoppingCartItemService.UpdateShoppingCartItemAsync(updateShoppingCartItemDto, id, userId);
            _logger.LogInformation("Shopping Cart Item updated successfully with Id {ShoppingCartItemId}", id);
            return ApiResponse.OkResult("Resource updated successfully");
        }
    }
}

================
File: AutoPile.API/Mapping/MappingProfile.cs
================
using AutoMapper;
using AutoPile.API.Validators;
using AutoPile.DOMAIN.DTOs.Requests;
using AutoPile.DOMAIN.DTOs.Responses;
using AutoPile.DOMAIN.Models.Entities;
using static System.Net.Mime.MediaTypeNames;

namespace AutoPile.API.Mapping
{
    public class MappingProfile : Profile
    {
        public byte[] ConvertFromFiletoArray(IFormFile Image)
        {
            if (Image == null || Image.Length == 0) return null;
            using var ms = new MemoryStream();
            Image.CopyTo(ms);
            return ms.ToArray();
        }

        public MappingProfile()
        {
            CreateMap<ReviewCreateDTO, Review>().ForMember(dest => dest.CreatedAt, opt => opt.MapFrom(src => DateTime.UtcNow));
            //.ForMember(dest => dest.ImageContentType, opt => opt.MapFrom(src => src.Image != null ? src.Image.ContentType : null))
            //.ForMember(dest => dest.Image, opt => opt.MapFrom(src => ConvertFromFiletoArray(src.Image)));
            CreateMap<Review, ReviewResponseDTO>();
            //.ForMember(dest => dest.Image, opt => opt.MapFrom(src =>
            //    src.Image != null ? new ReviewImageDTO
            //    {
            //        Image = src.Image,
            //        ImageContentType = src.ImageContentType,
            //    } : null));
            CreateMap<ProductMediaCreateDTO, ProductMedia>();
            CreateMap<ProductMedia, ProductMediaResponseDTO>();
            CreateMap<ProductCreateDTO, Product>();
            CreateMap<Product, ProductResponseDTO>();
            CreateMap<OrderItemCreateDTO, OrderItem>();
            CreateMap<OrderItem, OrderItemResponseDTO>();
            CreateMap<OrderCreateDTO, Order>();
            CreateMap<Order, OrderResponseDTO>();

            CreateMap<UserSignupDTO, ApplicationUser>();
            CreateMap<UserSigninDTO, ApplicationUser>();

            CreateMap<ApplicationUser, UserResponseDTO>();
            CreateMap<UserUpdateInfoDTO, ApplicationUser>();
            CreateMap<ApplicationUser, UserInfoResponseDTO>();
            CreateMap<ShoppingCartItemRequestDto, ShoppingCartItem>();
            CreateMap<ShoppingCartItem, ShoppingCartItemResponseDTO>();
            CreateMap<UpdateShoppingCartItemDto, ShoppingCartItem>();
            CreateMap<ReviewUpdateDTO, Review>();

            //.ForMember(dest => dest.ImageContentType, opt => opt.MapFrom(src => src.Image != null ? src.Image.ContentType : null))
            //.ForMember(dest => dest.Image, opt => opt.MapFrom(src => ConvertFromFiletoArray(src.Image))); ;
            CreateMap<ProductMediaUpdateDto, ProductMedia>();
            CreateMap<OrderItemUpdateDTO, OrderItem>();
            CreateMap<OrderUpdateValidator, Order>();
        }
    }
}

================
File: AutoPile.API/Program.cs
================
using AutoPile.API;
using AutoPile.API.Validators;
using AutoPile.DATA.Data;
using AutoPile.DATA.Middlewares;
using AutoPile.DOMAIN.Interface;
using AutoPile.DOMAIN.Models;
using AutoPile.DOMAIN.Models.Entities;
using AutoPile.SERVICE.Services;
using AutoPile.SERVICE.Utilities;
using FluentValidation;
using FluentValidation.AspNetCore;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using MongoDB.Driver;
using Resend;
using System.Reflection;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers();
builder.Services.AddProblemDetails();
builder.Services.AddEndpointsApiExplorer();

builder.Services.AddSwaggerGen(c =>
{
    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
    c.IncludeXmlComments(xmlPath);
    c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Description =
            "JWT Authorization header using the Bearer scheme. Example: 'Authorization: Bearer {token}'",
        Name = "Authorization",
        In = ParameterLocation.Header,
        Type = SecuritySchemeType.ApiKey,
        Scheme = "Bearer"
    });

    c.AddSecurityRequirement(new OpenApiSecurityRequirement{
        {
            new OpenApiSecurityScheme{
                Reference = new OpenApiReference{
                    Id = "Bearer",
                    Type = ReferenceType.SecurityScheme
                }
            }, new List<string>()
        }
    });
});

builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
})
.AddJwtBearer(options =>
{
    options.RequireHttpsMetadata = false;
    options.TokenValidationParameters = new TokenValidationParameters
    {
        ValidateIssuer = true,
        ValidateAudience = true,
        ValidateLifetime = true,
        ValidateIssuerSigningKey = true,
        ValidIssuer = Environment.GetEnvironmentVariable("ISSUER") ?? builder.Configuration["Jwt:Issuer"],
        ValidAudience = Environment.GetEnvironmentVariable("AUDIENCE") ?? builder.Configuration["Jwt:Audience"],
        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Environment.GetEnvironmentVariable("JWTKEY") ?? builder.Configuration["Jwt:Key"]))
    };
});
builder.Services.AddAuthorization(options =>
{
    options.AddPolicy("AdminPolicy", policy => policy.RequireClaim("scope", "admin"));
    options.AddPolicy("UserPolicy", policy => policy.RequireClaim("scope", "user"));
});
builder.Services.AddScoped<IShoppingCartItemService, ShoppingCartItemService>();
builder.Services.AddScoped<JwtTokenGenerator>();
builder.Services.AddScoped<IJwtTokenGenerator, JwtTokenGenerator>();
builder.Services.AddScoped<IAuthService, AuthService>();
builder.Services.AddScoped<IReviewService, ReviewService>();
builder.Services.AddScoped<IBlobService, BlobService>();
builder.Services.AddScoped<IProductService, ProductService>();
// Learn more about configuring OpenAPI at https://aka.ms/aspnet/openapi
builder.Services.AddOpenApi();
builder.Services.AddFluentValidationAutoValidation();
builder.Services.AddFluentValidationClientsideAdapters();
builder.Services.AddValidatorsFromAssemblyContaining<UserSignupDTOValidator>();

builder.Services.Configure<IdentityOptions>(options =>
{
    options.Password.RequiredLength = 8;              // MinimumLength(8)
    options.Password.RequireUppercase = true;         // Matches("[A-Z]")
    options.Password.RequireLowercase = true;         // Matches("[a-z]")
    options.Password.RequireDigit = true;             // Matches("[0-9]")
    options.Password.RequireNonAlphanumeric = true;   // Matches("[^a-zA-Z0-9]")
});

var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");

// Add DbContext
builder.Services.AddDbContext<AutoPileManagementDbContext>(options =>
    options.UseSqlServer(connectionString));

var mongoConnectionString = Environment.GetEnvironmentVariable("MongoDB") ??
                          Environment.GetEnvironmentVariable("MongoDB_ConnectionStrings") ??
                          builder.Configuration.GetSection("MongoDb:ConnectionStrings").Value;
var mongoDbName = "AutoPileDb";

builder.Services.AddSingleton<IMongoClient>(sp =>
    new MongoClient(mongoConnectionString));

builder.Services.AddScoped(sp =>
{
    var client = sp.GetRequiredService<IMongoClient>();
    var database = client.GetDatabase(mongoDbName);
    return AutoPileMongoDbContext.Create(database);
});

//builder.Services.AddIdentity<ApplicationUser, ApplicationRole>()
//.AddEntityFrameworkStores<AutoPileManagementDbContext>()
//.AddDefaultTokenProviders();

builder.Services.AddIdentityApiEndpoints<ApplicationUser>()
    .AddRoles<ApplicationRole>()
    .AddEntityFrameworkStores<AutoPileManagementDbContext>()
    .AddSignInManager()
    .AddRoleManager<RoleManager<ApplicationRole>>()
    .AddDefaultTokenProviders();

builder.Services.AddAutoMapper(typeof(Program));
builder.Services.AddOptions();
builder.Services.AddHttpClient<ResendClient>();
builder.Services.Configure<ResendClientOptions>(o =>
{
    var token = Environment.GetEnvironmentVariable("RESEND_APITOKEN");
    if (string.IsNullOrEmpty(token))
    {
        Console.WriteLine("WARNING: RESEND_APITOKEN environment variable is not set!");
    }

    o.ApiToken = token!;
});
builder.Services.AddTransient<IResend, ResendClient>();
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowLocalhost3000",
        builder =>
        {
            builder.WithOrigins("http://localhost:3000")
            .WithOrigins("https://www.autopile.store/")
                   .AllowAnyHeader()
                   .AllowAnyMethod();
        });
});

var app = builder.Build();
app.UseCors("AllowLocalhost3000");
app.UseMiddleware<UserIdExtractMiddleware>();
app.UseMiddleware<ExceptionHandlingMiddleware>();
app.UseHsts();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.MapOpenApi();
    app.UseSwagger();
    app.UseSwaggerUI();
}
app.UseSwagger();
app.UseSwaggerUI(c =>
{
    c.SwaggerEndpoint("/swagger/v1/swagger.json", "AutoPile API V1");
    c.RoutePrefix = string.Empty; // This makes Swagger UI available at root
    c.DocExpansion(Swashbuckle.AspNetCore.SwaggerUI.DocExpansion.None);
    c.DefaultModelsExpandDepth(-1); // Hide schemas section by default
});

app.UseHttpsRedirection();
app.UseRouting();
app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();
using (var scope = app.Services.CreateScope())
{
    var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<ApplicationRole>>();
    var roles = new[] { "Admin", "User" };

    foreach (var role in roles)
    {
        if (!await roleManager.RoleExistsAsync(role))
        {
            var newRole = new ApplicationRole
            {
                Name = role,
                NormalizedName = role.ToUpper()
            };
            await roleManager.CreateAsync(newRole);
        }
    }
}
app.Run();

================
File: AutoPile.API/Properties/launchSettings.json
================
{
  "$schema": "https://json.schemastore.org/launchsettings.json",
  "profiles": {
    "http": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": false,
      "applicationUrl": "http://localhost:5104",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "https": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger",
      "applicationUrl": "https://localhost:7249;http://localhost:5104",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development",
        "RESEND_APITOKEN": "re_FFu4XttH_747FDbLnWmRucksFtEWpvteb",
        "BlobStorage": "DefaultEndpointsProtocol=https;AccountName=autopile;AccountKey=Q7F1A4KLdgHVdM5JDeH1rLxrHgebRRNXytyhY1AcfT5Pj0GZyorIbqWQrHCBGUivTgF5VusExpZ3+AStO8a2dQ==;EndpointSuffix=core.windows.net"
      }
    }
  }
}

================
File: AutoPile.API/Validators/OrderItemRequestValidator.cs
================
using AutoPile.DOMAIN.DTOs.Requests;
using FluentValidation;

namespace AutoPile.API.Validators
{
    public class OrderItemRequestValidator : AbstractValidator<OrderItemCreateDTO>
    {
        public OrderItemRequestValidator()
        {
            RuleFor(x => x.ProductId)
            .NotEmpty().WithMessage("Product ID is required")
            .Matches(@"^[0-9a-fA-F]{24}$").WithMessage("Invalid MongoDB ObjectId format for Product ID");

            RuleFor(x => x.ProductName)
                .NotEmpty().WithMessage("Product name is required")
                .MaximumLength(200).WithMessage("Product name cannot exceed 200 characters");

            RuleFor(x => x.ProductPrice)
                .GreaterThan(0).WithMessage("Product price must be greater than 0")
                .PrecisionScale(18, 2, true).WithMessage("Product price cannot have more than 2 decimal places");

            RuleFor(x => x.Quantity)
                .GreaterThan(0).WithMessage("Quantity must be greater than 0")
                .LessThanOrEqualTo(100).WithMessage("Quantity cannot exceed 100 items");
        }
    }
}

================
File: AutoPile.API/Validators/OrderItemUpdateValidator.cs
================
using AutoPile.DOMAIN.DTOs.Requests;
using FluentValidation;

namespace AutoPile.API.Validators
{
    public class OrderItemUpdateValidator : AbstractValidator<OrderItemUpdateDTO>
    {
        public OrderItemUpdateValidator()
        {
            RuleFor(x => x.Quantity)
                .GreaterThan(0).WithMessage("Quantity must be greater than 0")
                .LessThanOrEqualTo(100).WithMessage("Quantity cannot exceed 100 items");
        }
    }
}

================
File: AutoPile.API/Validators/OrderRequestValidator.cs
================
using AutoPile.DOMAIN.DTOs.Requests;
using FluentValidation;

namespace AutoPile.API.Validators
{
    public class OrderRequestValidator : AbstractValidator<OrderCreateDTO>
    {
        private bool BeValidPaymentMethod(string paymentMethod)
        {
            var validMethods = new[] { "Credit Card", "PayPal", "Stripe" };
            return validMethods.Contains(paymentMethod);
        }

        public OrderRequestValidator()
        {
            RuleFor(x => x.UserId)
               .NotEmpty().WithMessage("User ID is required")
               .MaximumLength(450).WithMessage("User ID cannot exceed 450 characters");

            RuleFor(x => x.PaymentMethod)
                .NotEmpty().WithMessage("Payment method is required")
                .MaximumLength(50).WithMessage("Payment method cannot exceed 50 characters")
                .Must(BeValidPaymentMethod).WithMessage("Invalid payment method. Must be one of: Credit Card, PayPal, Stripe");

            RuleFor(x => x.ShippingAddress_Line1)
                .NotEmpty().WithMessage("Shipping address line 1 is required")
                .MaximumLength(100).WithMessage("Address line 1 cannot exceed 100 characters");

            RuleFor(x => x.ShippingAddress_Line2)
                .MaximumLength(100).WithMessage("Address line 2 cannot exceed 100 characters");

            RuleFor(x => x.ShippingAddress_City)
                .NotEmpty().WithMessage("City is required")
                .MaximumLength(100).WithMessage("City cannot exceed 100 characters");

            RuleFor(x => x.ShippingAddress_Country)
                .NotEmpty().WithMessage("Country is required")
                .MaximumLength(100).WithMessage("Country cannot exceed 100 characters");

            RuleFor(x => x.ShippingAddress_State)
                .NotEmpty().WithMessage("State is required")
                .MaximumLength(100).WithMessage("State cannot exceed 100 characters");

            RuleFor(x => x.ShippingAddress_PostalCode)
                .NotEmpty().WithMessage("Postal code is required")
                .MaximumLength(20).WithMessage("Postal code cannot exceed 20 characters")
                .Matches(@"^[A-Za-z0-9\s-]+$").WithMessage("Postal code can only contain letters, numbers, spaces, and hyphens");

            RuleFor(x => x.OrderItems)
                .NotEmpty().WithMessage("Order must contain at least one item")
                .Must(items => items != null && items.Count != 0).WithMessage("Order items cannot be empty");
        }
    }
}

================
File: AutoPile.API/Validators/OrderUpdateValidator.cs
================
using AutoPile.DOMAIN.DTOs.Requests;
using FluentValidation;

namespace AutoPile.API.Validators
{
    public class OrderUpdateValidator : AbstractValidator<OrderUpdateDTO>
    {
        private bool BeValidPaymentMethod(string paymentMethod)
        {
            var validMethods = new[] { "Credit Card", "PayPal", "Stripe" };
            return validMethods.Contains(paymentMethod);
        }

        public OrderUpdateValidator()
        {
            RuleFor(x => x.Status)
               .NotEmpty().WithMessage("Status is required")
               .MaximumLength(50);
            RuleFor(x => x.PaymentMethod)
                .NotEmpty().WithMessage("Payment method is required")
                .MaximumLength(50).WithMessage("Payment method cannot exceed 50 characters")
                .Must(BeValidPaymentMethod).WithMessage("Invalid payment method. Must be one of: Credit Card, PayPal, Stripe");

            RuleFor(x => x.ShippingAddress_Line1)
                .NotEmpty().WithMessage("Shipping address line 1 is required")
                .MaximumLength(100).WithMessage("Address line 1 cannot exceed 100 characters");

            RuleFor(x => x.ShippingAddress_Line2)
                .MaximumLength(100).WithMessage("Address line 2 cannot exceed 100 characters");

            RuleFor(x => x.ShippingAddress_City)
                .NotEmpty().WithMessage("City is required")
                .MaximumLength(100).WithMessage("City cannot exceed 100 characters");

            RuleFor(x => x.ShippingAddress_Country)
                .NotEmpty().WithMessage("Country is required")
                .MaximumLength(100).WithMessage("Country cannot exceed 100 characters");

            RuleFor(x => x.ShippingAddress_State)
                .NotEmpty().WithMessage("State is required")
                .MaximumLength(100).WithMessage("State cannot exceed 100 characters");

            RuleFor(x => x.ShippingAddress_PostalCode)
                .NotEmpty().WithMessage("Postal code is required")
                .MaximumLength(20).WithMessage("Postal code cannot exceed 20 characters")
                .Matches(@"^[A-Za-z0-9\s-]+$").WithMessage("Postal code can only contain letters, numbers, spaces, and hyphens");

            RuleFor(x => x.OrderItems)
                .NotEmpty().WithMessage("Order must contain at least one item")
                .Must(items => items != null && items.Count != 0).WithMessage("Order items cannot be empty");
        }
    }
}

================
File: AutoPile.API/Validators/ProductMediaRequestValidator.cs
================
using AutoPile.DOMAIN.DTOs.Requests;
using FluentValidation;

namespace AutoPile.API.Validators
{
    public static class Helper
    {
        public static bool BeValidUrl(string url)
        {
            return Uri.TryCreate(url, UriKind.Absolute, out _);
        }

        public static bool BeValidMediaType(string mediaType)
        {
            return mediaType == "PHOTO";
        }
    }

    public class ProductMediaRequestValidator : AbstractValidator<ProductMediaCreateDTO>

    {
        public ProductMediaRequestValidator()
        {
            RuleFor(x => x.Url)
            .NotEmpty().WithMessage("URL is required");

            RuleFor(x => x.FullUrl)
                .NotEmpty().WithMessage("Full URL is required")
                .MaximumLength(2000).WithMessage("Full URL cannot exceed 2000 characters")
                .Must(Helper.BeValidUrl).WithMessage("Full URL must be a valid URL");

            RuleFor(x => x.MediaType)
                .NotEmpty().WithMessage("Media type is required")
                .MaximumLength(50).WithMessage("Media type cannot exceed 50 characters")
                .Must(Helper.BeValidMediaType).WithMessage("Media type must be : PHOTO");

            RuleFor(x => x.AltText)
                .MaximumLength(200).WithMessage("Alt text cannot exceed 200 characters")
                .When(x => !string.IsNullOrEmpty(x.AltText));

            RuleFor(x => x.Title)
                .MaximumLength(200).WithMessage("Title cannot exceed 200 characters")
                .When(x => !string.IsNullOrEmpty(x.Title));

            RuleFor(x => x.Width)
                .GreaterThan(0).WithMessage("Width must be greater than 0")
                .LessThanOrEqualTo(10000).WithMessage("Width cannot exceed 10000 pixels");

            RuleFor(x => x.Height)
                .GreaterThan(0).WithMessage("Height must be greater than 0")
                .LessThanOrEqualTo(10000).WithMessage("Height cannot exceed 10000 pixels");
        }
    }

    public class ProductMediaUpdateDtoValidator : AbstractValidator<ProductMediaUpdateDto>
    {
        public ProductMediaUpdateDtoValidator()
        {
            RuleFor(x => x.Url)
                .NotEmpty().WithMessage("URL is required")
                .MaximumLength(500).WithMessage("URL cannot exceed 500 characters");

            RuleFor(x => x.FullUrl)
                .NotEmpty().WithMessage("Full URL is required")
                .MaximumLength(2000).WithMessage("Full URL cannot exceed 2000 characters")
                .Must(Helper.BeValidUrl).WithMessage("Full URL must be a valid URL");

            RuleFor(x => x.MediaType)
                .NotEmpty().WithMessage("Media type is required")
                .MaximumLength(50).WithMessage("Media type cannot exceed 50 characters")
                .Must(Helper.BeValidMediaType).WithMessage("Media type must be : PHOTO");

            RuleFor(x => x.AltText)
                .MaximumLength(200).WithMessage("Alt text cannot exceed 200 characters")
                .When(x => !string.IsNullOrEmpty(x.AltText));

            RuleFor(x => x.Title)
                .MaximumLength(200).WithMessage("Title cannot exceed 200 characters")
                .When(x => !string.IsNullOrEmpty(x.Title));

            RuleFor(x => x.Width)
                .GreaterThan(0).WithMessage("Width must be greater than 0")
                .LessThanOrEqualTo(10000).WithMessage("Width cannot exceed 10000 pixels");

            RuleFor(x => x.Height)
                .GreaterThan(0).WithMessage("Height must be greater than 0")
                .LessThanOrEqualTo(10000).WithMessage("Height cannot exceed 10000 pixels");
        }
    }
}

================
File: AutoPile.API/Validators/ProductRequestValidator.cs
================
using AutoPile.DOMAIN.DTOs.Requests;
using FluentValidation;

namespace AutoPile.API.Validators
{
    public class ProductRequestValidator : AbstractValidator<ProductCreateDTO>
    {
        public ProductRequestValidator()
        {
            RuleFor(x => x.Name)
               .NotEmpty().WithMessage("Product name is required")
               .MaximumLength(200).WithMessage("Product name cannot exceed 200 characters");

            RuleFor(x => x.Description)
                .NotEmpty().WithMessage("Product description is required")
                .MaximumLength(1000).WithMessage("Description cannot exceed 1000 characters");

            RuleFor(x => x.ProductInfo)
                .NotEmpty().WithMessage("Product info is required")
                .MaximumLength(2000).WithMessage("Product info cannot exceed 2000 characters");

            RuleFor(x => x.SKU)
                .NotEmpty().WithMessage("SKU is required")
                .MaximumLength(50).WithMessage("SKU cannot exceed 50 characters")
                .Matches(@"^[A-Za-z0-9-]+$").WithMessage("SKU can only contain letters, numbers, and hyphens");

            RuleFor(x => x.Price)
                .GreaterThanOrEqualTo(0).WithMessage("Price must be greater than or equal to 0")
                .PrecisionScale(18, 2, true).WithMessage("Price cannot have more than 2 decimal places");

            RuleFor(x => x.ComparePrice)
                .GreaterThanOrEqualTo(0).When(x => x.ComparePrice.HasValue)
                .PrecisionScale(18, 2, true).When(x => x.ComparePrice.HasValue)
                .Must((model, comparePrice) => !comparePrice.HasValue || comparePrice.Value < model.Price)
                .WithMessage("Compare price must be less than regular price when specified");

            RuleFor(x => x.StockQuantity)
                .GreaterThanOrEqualTo(0).WithMessage("Stock quantity must be greater than or equal to 0")
                .Must((model, quantity) => !model.IsInStock || quantity > 0)
                .WithMessage("Stock quantity must be greater than 0 when product is in stock");

            RuleFor(x => x.Category)
                .IsInEnum().WithMessage("Invalid category value");

            RuleFor(x => x.Ribbon)
                .IsInEnum().WithMessage("Invalid ribbon value");

            RuleFor(x => x)
                .Must(x => !x.IsInStock || x.StockQuantity > 0)
                .WithMessage("Cannot mark product as in stock with zero quantity")
                .Must(x => x.IsInStock || x.StockQuantity == 0)
                .WithMessage("Out of stock products should have zero quantity");
        }
    }
}

================
File: AutoPile.API/Validators/ReviewRequestValidator.cs
================
using AutoPile.DOMAIN.DTOs.Requests;
using AutoPile.DOMAIN.Models.Entities;
using FluentValidation;

namespace AutoPile.API.Validators
{
    public class ReviewRequestValidator : AbstractValidator<ReviewCreateDTO>
    {
        private bool BeValidImage(IFormFile file)
        {
            if (file == null) return true;

            if (file.Length > 5 * 1024 * 1024)
                return false;

            var allowedExtensions = new[] { ".jpg", ".jpeg", ".png" };
            var extension = Path.GetExtension(file.FileName).ToLowerInvariant();

            return allowedExtensions.Contains(extension);
        }

        public ReviewRequestValidator()
        {
            //RuleFor(x => x.UserId)
            //     .NotEmpty().WithMessage("User ID is required")
            //     .MaximumLength(450).WithMessage("User ID cannot exceed 450 characters");

            RuleFor(x => x.ProductId)
            .NotEmpty().WithMessage("Product ID is required")
            .Matches(@"^[0-9a-fA-F]{24}$").WithMessage("Invalid MongoDB ObjectId format for Product ID");

            RuleFor(x => x.Title)
                .NotEmpty().WithMessage("Title is required")
                .MaximumLength(200).WithMessage("Title cannot exceed 200 characters");

            RuleFor(x => x.Subtitle)
                .MaximumLength(500).WithMessage("Subtitle cannot exceed 500 characters");

            RuleFor(x => x.Content)
                .NotEmpty().WithMessage("Content is required")
                .MinimumLength(10).WithMessage("Content must be at least 10 characters long")
                .MaximumLength(5000).WithMessage("Content cannot exceed 5000 characters");

            RuleFor(x => x.Rating)
                .InclusiveBetween(1, 5).WithMessage("Rating must be between 1 and 5");

            RuleFor(x => x.Image)
                .Must(BeValidImage).When(x => x.Image != null)
                .WithMessage("Invalid image format. Only jpg, jpeg, png files are allowed and must be less than 5MB");
        }
    }
}

================
File: AutoPile.API/Validators/ReviewUpdateValidator.cs
================
using AutoPile.DOMAIN.DTOs.Requests;
using FluentValidation;

namespace AutoPile.API.Validators
{
    public class ReviewUpdateValidator : AbstractValidator<ReviewUpdateDTO>
    {
        public ReviewUpdateValidator()
        {
            RuleFor(x => x.Title)
                .MaximumLength(200).WithMessage("Title cannot exceed 200 characters");

            RuleFor(x => x.Subtitle)
                .MaximumLength(500).WithMessage("Subtitle cannot exceed 500 characters");

            RuleFor(x => x.Content)
                .MinimumLength(10).WithMessage("Content must be at least 10 characters long")
                .MaximumLength(5000).WithMessage("Content cannot exceed 5000 characters");

            RuleFor(x => x.Rating)
                .InclusiveBetween(1, 5).WithMessage("Rating must be between 1 and 5");

            RuleFor(x => x.Image)
                .Must(BeValidImage).When(x => x.Image != null)
                .WithMessage("Invalid image format. Only jpg, jpeg, png files are allowed and must be less than 5MB");
        }

        private bool BeValidImage(IFormFile file)
        {
            if (file == null) return true;

            if (file.Length > 5 * 1024 * 1024)
                return false;

            var allowedExtensions = new[] { ".jpg", ".jpeg", ".png" };
            var extension = Path.GetExtension(file.FileName).ToLowerInvariant();

            return allowedExtensions.Contains(extension);
        }
    }
}

================
File: AutoPile.API/Validators/ShoppingCartItemValidator.cs
================
using AutoPile.DOMAIN.DTOs.Requests;
using FluentValidation;
using MongoDB.Bson;

namespace AutoPile.API.Validators
{
    public class ShoppingCartItemValidator : AbstractValidator<ShoppingCartItemRequestDto>
    {
        public ShoppingCartItemValidator()
        {
            RuleFor(x => x.ProductId)
            .NotEmpty()
            .WithMessage("Product ID is required.")
            .Must(BeValidObjectId)
            .WithMessage("Invalid MongoDB ObjectId format for Product ID");

            RuleFor(x => x.Quantity)
                .NotEmpty()
                .WithMessage("Quantity is required.")
                .GreaterThan(0)
                .WithMessage("Quantity must be greater than 0.")
                .LessThanOrEqualTo(100)
                .WithMessage("Quantity cannot exceed 100 items per order.");
        }

        private bool BeValidObjectId(string productId)
        {
            return !string.IsNullOrEmpty(productId) && ObjectId.TryParse(productId, out _);
        }
    }

    public class UpdateShoppingCartItemValidator : AbstractValidator<UpdateShoppingCartItemDto>
    {
        public UpdateShoppingCartItemValidator()
        {
            RuleFor(x => x.Quantity)
                .NotEmpty()
                .WithMessage("Quantity is required.")
                .GreaterThan(0)
                .WithMessage("Quantity must be greater than 0.")
                .LessThanOrEqualTo(100)
                .WithMessage("Quantity cannot exceed 100 items.");
        }
    }
}

================
File: AutoPile.API/Validators/UserSigninDTOValidator.cs
================
using AutoPile.DOMAIN.DTOs.Requests;
using FluentValidation;

namespace AutoPile.API.Validators
{
    public class UserSigninDTOValidator : AbstractValidator<UserSigninDTO>
    {
        public UserSigninDTOValidator()
        {
            RuleFor(u => u.Email)
                .NotEmpty().WithMessage("Email is required")
                .EmailAddress().WithMessage("Invalid email format");

            RuleFor(u => u.Password)
                .NotEmpty().WithMessage("Password is required");
        }
    }

    public class UserSignupDTOValidator : AbstractValidator<UserSignupDTO>
    {
        public UserSignupDTOValidator()
        {
            RuleFor(u => u.UserName)
                .NotEmpty().WithMessage("Username is required")
                .MinimumLength(3).WithMessage("Username must be at least 3 characters")
                .MaximumLength(100).WithMessage("Username must not exceed 100 characters")
                .Matches("^[a-zA-Z0-9._-]+$").WithMessage("Username can only contain letters, numbers, dots, underscores, and hyphens");

            RuleFor(u => u.FirstName)
                .NotEmpty().WithMessage("First name is required")
                .MaximumLength(100).WithMessage("First name must not exceed 100 characters")
                .Matches("^[a-zA-Z\\s-']+$").WithMessage("First name can only contain letters, spaces, hyphens, and apostrophes");

            RuleFor(u => u.LastName)
                .NotEmpty().WithMessage("Last name is required")
                .MaximumLength(100).WithMessage("Last name must not exceed 100 characters")
                .Matches("^[a-zA-Z\\s-']+$").WithMessage("Last name can only contain letters, spaces, hyphens, and apostrophes");

            RuleFor(u => u.Email)
                .NotEmpty().WithMessage("Email is required")
                .EmailAddress().WithMessage("Invalid email format")
                .MaximumLength(100).WithMessage("Email must not exceed 100 characters");

            RuleFor(u => u.Password)
                .NotEmpty().WithMessage("Password is required")
                .MinimumLength(8).WithMessage("Password must be at least 8 characters")
                .MaximumLength(100).WithMessage("Password must not exceed 100 characters")
                .Matches("[A-Z]").WithMessage("Password must contain at least one uppercase letter")
                .Matches("[a-z]").WithMessage("Password must contain at least one lowercase letter")
                .Matches("[0-9]").WithMessage("Password must contain at least one number")
                .Matches("[^a-zA-Z0-9]").WithMessage("Password must contain at least one special character");

            RuleFor(u => u.PhoneNumber)
                .NotEmpty().WithMessage("Phone number is required")
                .MaximumLength(20).WithMessage("Phone number must not exceed 20 characters")
                .Matches("^\\+?[1-9][0-9]{7,14}$").WithMessage("Invalid phone number format. Use international format (e.g., +1234567890)");
        }
    }

    public class UserUpdateInfoDTOValidator : AbstractValidator<UserUpdateInfoDTO>
    {
        public UserUpdateInfoDTOValidator()
        {
            RuleFor(u => u.FirstName)
                .MaximumLength(100).WithMessage("First name must not exceed 100 characters")
                .Matches("^[a-zA-Z\\s-']+$").WithMessage("First name can only contain letters, spaces, hyphens, and apostrophes")
                .When(u => !string.IsNullOrEmpty(u.FirstName));

            RuleFor(u => u.LastName)
                .MaximumLength(100).WithMessage("Last name must not exceed 100 characters")
                .Matches("^[a-zA-Z\\s-']+$").WithMessage("Last name can only contain letters, spaces, hyphens, and apostrophes")
                .When(u => !string.IsNullOrEmpty(u.LastName));

            RuleFor(u => u.PhoneNumber)
                .MaximumLength(20).WithMessage("Phone number must not exceed 20 characters")
                .Matches("^\\+?[1-9][0-9]{7,14}$").WithMessage("Invalid phone number format. Use international format (e.g., +1234567890)")
                .When(u => !string.IsNullOrEmpty(u.PhoneNumber));
        }
    }

    public class UserResetPasswordDTOValidator : AbstractValidator<UserResetPasswordDTO>
    {
        public UserResetPasswordDTOValidator()
        {
            RuleFor(u => u.NewPassword)
                .NotEmpty().WithMessage("New password is required")
                .MinimumLength(8).WithMessage("Password must be at least 8 characters")
                .MaximumLength(100).WithMessage("Password must not exceed 100 characters")
                .Matches("[A-Z]").WithMessage("Password must contain at least one uppercase letter")
                .Matches("[a-z]").WithMessage("Password must contain at least one lowercase letter")
                .Matches("[0-9]").WithMessage("Password must contain at least one number")
                .Matches("[^a-zA-Z0-9]").WithMessage("Password must contain at least one special character");

            RuleFor(u => u.Email)
                .NotEmpty().WithMessage("Email is required")
                .EmailAddress().WithMessage("Invalid email format")
                .MaximumLength(100).WithMessage("Email must not exceed 100 characters");

            RuleFor(u => u.EmailVerifyToken)
                .NotEmpty().WithMessage("Email verification token is required")
                .MaximumLength(300).WithMessage("Email verification token must not exceed 300 characters");
        }
    }
}

================
File: AutoPile.API/Validators/ValidateTokenRequestValidator.cs
================
using AutoPile.DOMAIN.DTOs.Requests;
using FluentValidation;

namespace AutoPile.API.Validators
{
    public class ValidateTokenRequestValidator : AbstractValidator<ValidateTokenRequest>
    {
        public ValidateTokenRequestValidator()
        {
            RuleFor(x => x.Email)
                .NotEmpty().WithMessage("Email is required")
                .EmailAddress().WithMessage("A valid email address is required")
                .MaximumLength(256).WithMessage("Email must not exceed 256 characters");

            RuleFor(x => x.Token)
                .NotEmpty().WithMessage("Token is required");
        }
    }
}

================
File: AutoPile.DATA/AutoPile.DATA.csproj
================
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <UserSecretsId>6cdf8e20-f1aa-491a-8988-e8f2b94dc7c1</UserSecretsId>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="8.0.10" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="8.0.10">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.Extensions.Configuration" Version="9.0.0" />
    <PackageReference Include="Microsoft.Extensions.Configuration.FileExtensions" Version="9.0.0" />
    <PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="9.0.0" />
    <PackageReference Include="Microsoft.Extensions.Configuration.UserSecrets" Version="6.0.1" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\AutoPile.DOMAIN\AutoPile.DOMAIN.csproj" />
  </ItemGroup>

</Project>

================
File: AutoPile.DATA/Configurations/OrderConfigurations.cs
================
using AutoPile.DOMAIN.Models.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DATA.Configurations
{
    public class OrderConfigurations : IEntityTypeConfiguration<Order>
    {
        public void Configure(EntityTypeBuilder<Order> builder)
        {
            builder.Property(e => e.DeliveryFee).HasPrecision(18, 2);
            builder.Property(e => e.SubTotal).HasPrecision(18, 2);
            builder.Property(e => e.TotalAmount).HasPrecision(18, 2);
        }
    }
}

================
File: AutoPile.DATA/Configurations/OrderItemConfigurations.cs
================
using AutoPile.DOMAIN.Models.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DATA.Configurations
{
    public class OrderItemConfigurations : IEntityTypeConfiguration<OrderItem>
    {
        public void Configure(EntityTypeBuilder<OrderItem> builder)
        {
            builder.Property(e => e.ProductPrice).HasPrecision(18, 2);
            builder.Property(e => e.TotalPrice).HasPrecision(18, 2);
            builder.Property(e => e.ProductId).HasMaxLength(24);
        }
    }
}

================
File: AutoPile.DATA/Configurations/ProductConfigurations.cs
================
using AutoPile.DOMAIN.Models.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DATA.Configurations
{
    public class ProductConfigurations : IEntityTypeConfiguration<Product>
    {
        public void Configure(EntityTypeBuilder<Product> builder)
        {
            builder.Property(e => e.Price).HasPrecision(18, 2);
            builder.Property(e => e.ComparePrice).HasPrecision(18, 2);
        }
    }
}

================
File: AutoPile.DATA/Configurations/ShoppingCartItemConfigurations.cs
================
using AutoPile.DOMAIN.Models.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DATA.Configurations
{
    public class ShoppingCartItemConfigurations : IEntityTypeConfiguration<ShoppingCartItem>
    {
        public void Configure(EntityTypeBuilder<ShoppingCartItem> builder)
        {
            builder.Property(s => s.ProductId).HasMaxLength(24);
        }
    }
}

================
File: AutoPile.DATA/Data/AutoPileManagementDbContext.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using AutoPile.DATA.Configurations;
using AutoPile.DOMAIN.Models.Entities;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace AutoPile.DATA.Data
{
    public class AutoPileManagementDbContext : IdentityDbContext<ApplicationUser, ApplicationRole, string>
    {
        public AutoPileManagementDbContext(DbContextOptions<AutoPileManagementDbContext> options)
            : base(options)
        {
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            modelBuilder.ApplyConfiguration(new OrderConfigurations());
            modelBuilder.ApplyConfiguration(new OrderItemConfigurations());

            modelBuilder.ApplyConfiguration(new ShoppingCartItemConfigurations());

            modelBuilder.Entity<Order>().HasMany(o => o.OrderItems).WithOne(o => o.Order).HasForeignKey(o => o.OrderId);

            modelBuilder.Entity<ApplicationUser>().HasMany(u => u.Orders).WithOne(u => u.User).HasForeignKey(u => u.UserId);

            modelBuilder.Entity<ApplicationUser>().HasMany(u => u.ShoppingCartItems).WithOne(u => u.User).HasForeignKey(u => u.UserId);
        }

        public DbSet<ApplicationUser> ApplicationUsers { get; set; }
        public DbSet<ApplicationRole> ApplicationRoles { get; set; }
        public DbSet<OrderItem> OrderItems { get; set; }
        public DbSet<Order> Orders { get; set; }

        public DbSet<ShoppingCartItem> ShoppingCartItems { get; set; }
    }
}

================
File: AutoPile.DATA/Data/AutoPileMongoDbContext.cs
================
using AutoPile.DATA.Configurations;
using AutoPile.DOMAIN.Models.Entities;
using Microsoft.EntityFrameworkCore;
using MongoDB.Driver;
using MongoDB.EntityFrameworkCore.Extensions;
using MongoDB.EntityFrameworkCore.Infrastructure;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DATA.Data
{
    public class AutoPileMongoDbContext : DbContext
    {
        public DbSet<Product> Products { get; set; }
        public DbSet<Review> Reviews { get; set; }

        public static AutoPileMongoDbContext Create(IMongoDatabase database) =>
            new(new DbContextOptionsBuilder<AutoPileMongoDbContext>()
                .UseMongoDB(database.Client, database.DatabaseNamespace.DatabaseName)
                .Options);

        public AutoPileMongoDbContext(DbContextOptions options) : base(options)
        {
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyConfiguration(new ProductConfigurations());
            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<Product>().ToCollection("products");
            modelBuilder.Entity<Review>().ToCollection("reviews");
        }
    }
}

================
File: AutoPile.DATA/Exceptions/AbstractHTTPexception.cs
================
using AutoPile.DOMAIN.Interface;
using Microsoft.AspNetCore.Http;
using Newtonsoft.Json;

namespace AutoPile.DATA.Exceptions
{
    public abstract class AbstractHTTPexception : Exception, IExceptionHandler
    {
        public int StatusCode { get; set; }
        public Guid Id { get; } = Guid.NewGuid();
        public DateTime DateTime { get; } = DateTime.Now;

        protected AbstractHTTPexception(int statusCode, string message) : base(message)
        {
            StatusCode = statusCode;
        }

        public Task HandleExceptionAsync(HttpContext context)
        {
            context.Response.StatusCode = StatusCode;
            context.Response.ContentType = "application/json";

            var response = new
            {
                Code = StatusCode,
                Success = false,
                base.Message,
            };
            return context.Response.WriteAsync(JsonConvert.SerializeObject(response));
        }
    }
}

================
File: AutoPile.DATA/Exceptions/BadRequestException.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DATA.Exceptions
{
    public class BadRequestException : AbstractHTTPexception
    {
        public BadRequestException() : base(400, "Bad Request")
        {
        }

        public BadRequestException(string message) : base(400, message)
        {
        }
    }
}

================
File: AutoPile.DATA/Exceptions/NotFoundException.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DATA.Exceptions
{
    public class NotFoundException : AbstractHTTPexception
    {
        public NotFoundException() : base(404, "Not Found")
        {
        }

        public NotFoundException(string message) : base(404, message)
        {
        }
    }
}

================
File: AutoPile.DATA/Exceptions/UnauthorizedException.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DATA.Exceptions
{
    public class ForbiddenException : AbstractHTTPexception
    {
        public ForbiddenException() : base(403, "Forbidden")
        {
        }

        public ForbiddenException(string message) : base(403, message)
        {
        }
    }
}

================
File: AutoPile.DATA/Middlewares/ExceptionHandlingMiddleware.cs
================
using AutoPile.DATA.Exceptions;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DATA.Middlewares
{
    public class ExceptionHandlingMiddleware
    {
        private readonly RequestDelegate _next;
        private readonly ILogger<ExceptionHandlingMiddleware> _logger;

        public ExceptionHandlingMiddleware(RequestDelegate next, ILogger<ExceptionHandlingMiddleware> logger)
        {
            _next = next;
            _logger = logger;
        }

        public async Task InvokeAsync(HttpContext httpContext)
        {
            try
            {
                await _next(httpContext);
            }
            catch (AbstractHTTPexception ex)
            {
                _logger.LogError(ex, $"Http status: {ex.StatusCode}, Error Id: {ex.Id}, Error Time: {ex.DateTime}");
                await ex.HandleExceptionAsync(httpContext);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, $"Http status: {500}, Error Id: {Guid.NewGuid()}, Error Time: {DateTime.Now}");
                await HandleGeneralExceptionAsync(httpContext, ex);
            }
        }

        private Task HandleGeneralExceptionAsync(HttpContext context, Exception ex)
        {
            context.Response.ContentType = "application/json";
            context.Response.StatusCode = (int)HttpStatusCode.InternalServerError;
            var response = new
            {
                Code = (int)HttpStatusCode.InternalServerError,
                Message = "Internal Server Error",
                Success = false,
                Detailed = ex.Message
            };
            return context.Response.WriteAsync(JsonConvert.SerializeObject(response));
        }
    }
}

================
File: AutoPile.DATA/Middlewares/UserIdExtractMiddleware.cs
================
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Microsoft.IdentityModel.Tokens;
using System;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DATA.Middlewares
{
    public class UserIdExtractMiddleware
    {
        private readonly RequestDelegate _next;
        private readonly IConfiguration _configuration;
        private readonly ILogger<UserIdExtractMiddleware> _logger;

        public UserIdExtractMiddleware(RequestDelegate next, IConfiguration configuration, ILogger<UserIdExtractMiddleware> logger)
        {
            _next = next;
            _configuration = configuration;
            _logger = logger;
        }

        public async Task InvokeAsync(HttpContext httpcontext)
        {
            try
            {
                var authorizationHeader = httpcontext.Request.Headers["Authorization"].FirstOrDefault();
                var token = authorizationHeader?.Split(" ").Last();

                if (token != null)
                {
                    var handler = new JwtSecurityTokenHandler();
                    var jwtToken = handler.ReadJwtToken(token);

                    ValidateToken(token);

                    var userId = jwtToken.Claims.FirstOrDefault(c =>
                           c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value;

                    if (userId != null)
                    {
                        httpcontext.Items["UserId"] = userId;
                        _logger.LogInformation("user id is set");
                    }
                }
            }
            catch (SecurityTokenException ex)
            {
                httpcontext.Response.StatusCode = 401;
                await httpcontext.Response.WriteAsync($"Invalid token: {ex.Message}");
                return;
            }
            catch (Exception ex)
            {
                httpcontext.Response.StatusCode = 500;
                await httpcontext.Response.WriteAsync($"An error occurred while processing the token: {ex.Message}");
                return;
            }

            await _next(httpcontext);
        }

        private void ValidateToken(string token)
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(Environment.GetEnvironmentVariable("JWTKEY") ?? _configuration["Jwt:Key"]);

            tokenHandler.ValidateToken(token, new TokenValidationParameters
            {
                ValidateIssuerSigningKey = true,
                IssuerSigningKey = new SymmetricSecurityKey(key),
                ValidateIssuer = true,
                ValidIssuer = Environment.GetEnvironmentVariable("ISSUER") ?? _configuration["Jwt:Issuer"],
                ValidateAudience = true,
                ValidAudience = Environment.GetEnvironmentVariable("AUDIENCE") ?? _configuration["Jwt:Audience"],
                ClockSkew = TimeSpan.Zero,
                ValidateLifetime = true
            }, out SecurityToken validatedToken);
        }
    }
}

================
File: AutoPile.DATA/Migrations/20241227180443_InitialCreate.cs
================
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace AutoPile.DATA.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "AspNetRoles",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoles", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUsers",
                columns: table => new
                {
                    Id = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    EmailVerifyToken = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    FirstName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    LastName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedUserName = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    Email = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    NormalizedEmail = table.Column<string>(type: "nvarchar(256)", maxLength: 256, nullable: true),
                    EmailConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    PasswordHash = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    SecurityStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ConcurrencyStamp = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PhoneNumber = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    PhoneNumberConfirmed = table.Column<bool>(type: "bit", nullable: false),
                    TwoFactorEnabled = table.Column<bool>(type: "bit", nullable: false),
                    LockoutEnd = table.Column<DateTimeOffset>(type: "datetimeoffset", nullable: true),
                    LockoutEnabled = table.Column<bool>(type: "bit", nullable: false),
                    AccessFailedCount = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUsers", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "AspNetRoleClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RoleId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetRoleClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetRoleClaims_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserClaims",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ClaimType = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    ClaimValue = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserClaims", x => x.Id);
                    table.ForeignKey(
                        name: "FK_AspNetUserClaims_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserLogins",
                columns: table => new
                {
                    LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ProviderKey = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ProviderDisplayName = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey });
                    table.ForeignKey(
                        name: "FK_AspNetUserLogins_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserRoles",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    RoleId = table.Column<string>(type: "nvarchar(450)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserRoles", x => new { x.UserId, x.RoleId });
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetRoles_RoleId",
                        column: x => x.RoleId,
                        principalTable: "AspNetRoles",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_AspNetUserRoles_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "AspNetUserTokens",
                columns: table => new
                {
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    LoginProvider = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Name = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Value = table.Column<string>(type: "nvarchar(max)", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_AspNetUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
                    table.ForeignKey(
                        name: "FK_AspNetUserTokens_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Orders",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    OrderNumber = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    OrderDate = table.Column<DateTime>(type: "datetime2", nullable: false),
                    Status = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    SubTotal = table.Column<decimal>(type: "decimal(18,2)", precision: 18, scale: 2, nullable: false),
                    DeliveryFee = table.Column<decimal>(type: "decimal(18,2)", precision: 18, scale: 2, nullable: false),
                    TotalAmount = table.Column<decimal>(type: "decimal(18,2)", precision: 18, scale: 2, nullable: false),
                    PaymentStatus = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    PaymentMethod = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    StripeSessionId = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ShippingAddress_Line1 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ShippingAddress_Line2 = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ShippingAddress_City = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ShippingAddress_Country = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ShippingAddress_State = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ShippingAddress_PostalCode = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Orders", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Orders_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ShoppingCartItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    UserId = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    ProductId = table.Column<string>(type: "nvarchar(24)", maxLength: 24, nullable: false),
                    Quantity = table.Column<int>(type: "int", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "datetime2", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ShoppingCartItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ShoppingCartItems_AspNetUsers_UserId",
                        column: x => x.UserId,
                        principalTable: "AspNetUsers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "OrderItems",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    OrderId = table.Column<int>(type: "int", nullable: false),
                    ProductId = table.Column<string>(type: "nvarchar(24)", maxLength: 24, nullable: false),
                    ProductName = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    ProductPrice = table.Column<decimal>(type: "decimal(18,2)", precision: 18, scale: 2, nullable: false),
                    Quantity = table.Column<int>(type: "int", nullable: false),
                    TotalPrice = table.Column<decimal>(type: "decimal(18,2)", precision: 18, scale: 2, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_OrderItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_OrderItems_Orders_OrderId",
                        column: x => x.OrderId,
                        principalTable: "Orders",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_AspNetRoleClaims_RoleId",
                table: "AspNetRoleClaims",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "RoleNameIndex",
                table: "AspNetRoles",
                column: "NormalizedName",
                unique: true,
                filter: "[NormalizedName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserClaims_UserId",
                table: "AspNetUserClaims",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserLogins_UserId",
                table: "AspNetUserLogins",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_AspNetUserRoles_RoleId",
                table: "AspNetUserRoles",
                column: "RoleId");

            migrationBuilder.CreateIndex(
                name: "EmailIndex",
                table: "AspNetUsers",
                column: "NormalizedEmail");

            migrationBuilder.CreateIndex(
                name: "UserNameIndex",
                table: "AspNetUsers",
                column: "NormalizedUserName",
                unique: true,
                filter: "[NormalizedUserName] IS NOT NULL");

            migrationBuilder.CreateIndex(
                name: "IX_OrderItems_OrderId",
                table: "OrderItems",
                column: "OrderId");

            migrationBuilder.CreateIndex(
                name: "IX_Orders_UserId",
                table: "Orders",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_ShoppingCartItems_UserId",
                table: "ShoppingCartItems",
                column: "UserId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "AspNetRoleClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserClaims");

            migrationBuilder.DropTable(
                name: "AspNetUserLogins");

            migrationBuilder.DropTable(
                name: "AspNetUserRoles");

            migrationBuilder.DropTable(
                name: "AspNetUserTokens");

            migrationBuilder.DropTable(
                name: "OrderItems");

            migrationBuilder.DropTable(
                name: "ShoppingCartItems");

            migrationBuilder.DropTable(
                name: "AspNetRoles");

            migrationBuilder.DropTable(
                name: "Orders");

            migrationBuilder.DropTable(
                name: "AspNetUsers");
        }
    }
}

================
File: AutoPile.DATA/Migrations/20241227180443_InitialCreate.Designer.cs
================
// <auto-generated />
using System;
using AutoPile.DATA.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AutoPile.DATA.Migrations
{
    [DbContext(typeof(AutoPileManagementDbContext))]
    [Migration("20241227180443_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmailVerifyToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DeliveryFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress_City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress_Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress_Line1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress_Line2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress_PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress_State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeSessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.Order", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.OrderItem", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.ShoppingCartItem", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationUser", "User")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}

================
File: AutoPile.DATA/Migrations/20241229055646_AddEmailVerifyTokenCreatedAt.cs
================
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace AutoPile.DATA.Migrations
{
    /// <inheritdoc />
    public partial class AddEmailVerifyTokenCreatedAt : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<DateTime>(
                name: "EmailVerifyTokenCreatedAt",
                table: "AspNetUsers",
                type: "datetime2",
                nullable: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "EmailVerifyTokenCreatedAt",
                table: "AspNetUsers");
        }
    }
}

================
File: AutoPile.DATA/Migrations/20241229055646_AddEmailVerifyTokenCreatedAt.Designer.cs
================
// <auto-generated />
using System;
using AutoPile.DATA.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AutoPile.DATA.Migrations
{
    [DbContext(typeof(AutoPileManagementDbContext))]
    [Migration("20241229055646_AddEmailVerifyTokenCreatedAt")]
    partial class AddEmailVerifyTokenCreatedAt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmailVerifyToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmailVerifyTokenCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DeliveryFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress_City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress_Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress_Line1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress_Line2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress_PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress_State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeSessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.Order", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.OrderItem", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.ShoppingCartItem", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationUser", "User")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}

================
File: AutoPile.DATA/Migrations/AutoPileManagementDbContextModelSnapshot.cs
================
// <auto-generated />
using System;
using AutoPile.DATA.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AutoPile.DATA.Migrations
{
    [DbContext(typeof(AutoPileManagementDbContext))]
    partial class AutoPileManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmailVerifyToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EmailVerifyTokenCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DeliveryFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress_City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress_Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress_Line1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress_Line2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress_PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingAddress_State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StripeSessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.ShoppingCartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.Order", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.OrderItem", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.ShoppingCartItem", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationUser", "User")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AutoPile.DOMAIN.Models.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ShoppingCartItems");
                });

            modelBuilder.Entity("AutoPile.DOMAIN.Models.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}

================
File: AutoPile.DOMAIN/AutoPile.DOMAIN.csproj
================
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="8.0.10" />
    <PackageReference Include="Microsoft.AspNetCore.Http.Abstractions" Version="2.2.0" />
    <PackageReference Include="Microsoft.AspNetCore.Http.Features" Version="5.0.17" />
    <PackageReference Include="Microsoft.AspNetCore.Identity.EntityFrameworkCore" Version="8.0.10" />
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="8.0.10" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="8.0.10">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="MongoDB.EntityFrameworkCore" Version="8.2.1" />
  </ItemGroup>

</Project>

================
File: AutoPile.DOMAIN/DTOs/Requests/OrderCreateDTO.cs
================
using AutoPile.DOMAIN.DTOs.Responses;
using AutoPile.DOMAIN.Models.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Requests
{
    public class OrderCreateDTO
    {
        public string UserId { get; set; }
        public string PaymentMethod { get; set; }
        public string ShippingAddress_Line1 { get; set; }
        public string ShippingAddress_Line2 { get; set; }
        public string ShippingAddress_City { get; set; }
        public string ShippingAddress_Country { get; set; }
        public string ShippingAddress_State { get; set; }
        public string ShippingAddress_PostalCode { get; set; }
        public ICollection<OrderItemResponseDTO> OrderItems { get; set; }
    }
}

================
File: AutoPile.DOMAIN/DTOs/Requests/OrderItemCreateDTO.cs
================
using AutoPile.DOMAIN.Models.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Requests
{
    public class OrderItemCreateDTO
    {
        public string ProductId { get; set; }
        public string ProductName { get; set; }
        public decimal ProductPrice { get; set; }
        public int Quantity { get; set; }
    }
}

================
File: AutoPile.DOMAIN/DTOs/Requests/OrderItemUpdateDTO.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Requests
{
    public class OrderItemUpdateDTO
    {
        public int Quantity { get; set; }
    }
}

================
File: AutoPile.DOMAIN/DTOs/Requests/OrderUpdateDTO.cs
================
using AutoPile.DOMAIN.DTOs.Responses;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Requests
{
    public class OrderUpdateDTO
    {
        public string Status { get; set; }
        public string PaymentMethod { get; set; }
        public string ShippingAddress_Line1 { get; set; }
        public string ShippingAddress_Line2 { get; set; }
        public string ShippingAddress_City { get; set; }
        public string ShippingAddress_Country { get; set; }
        public string ShippingAddress_State { get; set; }
        public string ShippingAddress_PostalCode { get; set; }
        public ICollection<OrderItemResponseDTO> OrderItems { get; set; }
    }
}

================
File: AutoPile.DOMAIN/DTOs/Requests/ProductCreateDTO.cs
================
using AutoPile.DOMAIN.Enum;
using AutoPile.DOMAIN.Models.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Requests
{
    public class ProductCreateDTO
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public string ProductInfo { get; set; }
        public string SKU { get; set; }
        public decimal Price { get; set; }
        public decimal? ComparePrice { get; set; }
        public bool IsInStock { get; set; }
        public int StockQuantity { get; set; }
        public Ribbon Ribbon { get; set; }
        public Category Category { get; set; }

        public List<ProductMediaCreateDTO> ProductMedias { get; set; }
    }
}

================
File: AutoPile.DOMAIN/DTOs/Requests/ProductMediaCreateDTO.cs
================
using AutoPile.DOMAIN.Models.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Requests
{
    public class ProductMediaCreateDTO
    {
        public string Url { get; set; }
        public string FullUrl { get; set; }
        public string MediaType { get; set; }
        public string AltText { get; set; }
        public string Title { get; set; }
        public int Width { get; set; }
        public int Height { get; set; }
    }
}

================
File: AutoPile.DOMAIN/DTOs/Requests/ProductMediaUpdateDTO.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Requests
{
    public class ProductMediaUpdateDto
    {
        public string Url { get; set; }
        public string FullUrl { get; set; }
        public string MediaType { get; set; }
        public string AltText { get; set; }
        public string Title { get; set; }
        public int Width { get; set; }
        public int Height { get; set; }
    }
}

================
File: AutoPile.DOMAIN/DTOs/Requests/ProductUpdateDTO.cs
================
using AutoPile.DOMAIN.Enum;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Requests
{
    public class ProductUpdateDTO
    {
        public string? Name { get; set; }
        public string? Description { get; set; }
        public string? ProductInfo { get; set; }
        public string? SKU { get; set; }
        public decimal? Price { get; set; }
        public decimal? ComparePrice { get; set; }
        public bool? IsInStock { get; set; }
        public int? StockQuantity { get; set; }
        public Ribbon? Ribbon { get; set; }
        public Category? Category { get; set; }

        public List<ProductMediaCreateDTO>? ProductMedias { get; set; }
    }
}

================
File: AutoPile.DOMAIN/DTOs/Requests/ReviewCreateDTO.cs
================
using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Requests
{
    public class ReviewCreateDTO
    {
        public string ProductId { get; set; }
        public string Title { get; set; }
        public string Subtitle { get; set; }
        public string Content { get; set; }
        public int Rating { get; set; }
        public IFormFile Image { get; set; }
    }
}

================
File: AutoPile.DOMAIN/DTOs/Requests/ReviewUpdateDTO.cs
================
using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Requests
{
    public class ReviewUpdateDTO
    {
        public string? Title { get; set; }
        public string? Subtitle { get; set; }
        public string? Content { get; set; }
        public int? Rating { get; set; }
        public IFormFile? Image { get; set; }
    }
}

================
File: AutoPile.DOMAIN/DTOs/Requests/ShoppingCartItemRequestDTO.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Requests
{
    public class ShoppingCartItemRequestDto
    {
        public string ProductId { get; set; }
        public int Quantity { get; set; }
    }

    public class UpdateShoppingCartItemDto
    {
        public int Quantity { get; set; }
    }
}

================
File: AutoPile.DOMAIN/DTOs/Requests/UserResetPasswordDTO.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Requests
{
    public class UserResetPasswordDTO
    {
        public string Email { get; set; }
        public string NewPassword { get; set; }
        public string EmailVerifyToken { get; set; }
    }
}

================
File: AutoPile.DOMAIN/DTOs/Requests/UserSigninDTO.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Requests
{
    public class UserSigninDTO
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
}

================
File: AutoPile.DOMAIN/DTOs/Requests/UserSignupDTO.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Requests
{
    public class UserSignupDTO
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string UserName { get; set; }
        public string? PhoneNumber { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
    }
}

================
File: AutoPile.DOMAIN/DTOs/Requests/UserUpdateInfoDTO.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Requests
{
    public class UserUpdateInfoDTO
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string PhoneNumber { get; set; }
    }
}

================
File: AutoPile.DOMAIN/DTOs/Requests/ValidateTokenRequest.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Requests
{
    public class ValidateTokenRequest
    {
        public string Email { get; set; }
        public string Token { get; set; }
    }
}

================
File: AutoPile.DOMAIN/DTOs/Responses/OrderItemResponseDTO.cs
================
using AutoPile.DOMAIN.Models.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Responses
{
    public class OrderItemResponseDTO
    {
        public int Id { get; set; }
        public string ProductId { get; set; }
        public string ProductName { get; set; }
        public decimal ProductPrice { get; set; }
        public int Quantity { get; set; }
        public decimal TotalPrice { get; set; }
        public ProductResponseDTO Product { get; set; }
    }
}

================
File: AutoPile.DOMAIN/DTOs/Responses/OrderResponseDTO.cs
================
using AutoPile.DOMAIN.Models.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Responses
{
    public class OrderResponseDTO
    {
        public int Id { get; set; }
        public string UserId { get; set; }
        public string OrderNumber { get; set; }
        public DateTime OrderDate { get; set; }
        public string Status { get; set; }
        public decimal SubTotal { get; set; }
        public decimal DeliveryFee { get; set; }
        public decimal TotalAmount { get; set; }
        public string PaymentStatus { get; set; }
        public string PaymentMethod { get; set; }
        public string StripeSessionId { get; set; }
        public string ShippingAddress_Line1 { get; set; }
        public string ShippingAddress_Line2 { get; set; }
        public string ShippingAddress_City { get; set; }
        public string ShippingAddress_Country { get; set; }
        public string ShippingAddress_State { get; set; }
        public string ShippingAddress_PostalCode { get; set; }
        public ICollection<OrderItemResponseDTO> OrderItems { get; set; }
    }
}

================
File: AutoPile.DOMAIN/DTOs/Responses/ProductMediaResponseDTO.cs
================
using AutoPile.DOMAIN.Models.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Responses
{
    public class ProductMediaResponseDTO
    {
        public string Url { get; set; }
        public string FullUrl { get; set; }
        public string MediaType { get; set; }
        public string AltText { get; set; }
        public string Title { get; set; }
        public int Width { get; set; }
        public int Height { get; set; }
    }
}

================
File: AutoPile.DOMAIN/DTOs/Responses/ProductResponseDTO.cs
================
using AutoPile.DOMAIN.Enum;
using AutoPile.DOMAIN.Models.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Responses
{
    public class ProductResponseDTO
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }
        public string ProductInfo { get; set; }
        public string SKU { get; set; }
        public decimal Price { get; set; }
        public decimal ComparePrice { get; set; }
        public bool IsInStock { get; set; }
        public int StockQuantity { get; set; }
        public Ribbon Ribbon { get; set; }
        public DateTime CreatedAt { get; set; }

        public DateTime UpdatedAt { get; set; }
        public Category Category { get; set; }
        public List<ProductMediaResponseDTO> ProductMedias { get; set; }
    }
}

================
File: AutoPile.DOMAIN/DTOs/Responses/ReviewImageDTO.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Responses
{
    public class ReviewImageDTO
    {
        public byte[] Image { get; init; }
        public string ImageContentType { get; init; }

        public string Base64Image => Image != null && ImageContentType != null
            ? $"data:{ImageContentType};base64,{Convert.ToBase64String(Image)}"
            : null;
    }
}

================
File: AutoPile.DOMAIN/DTOs/Responses/ReviewResponseDTO.cs
================
using AutoPile.DOMAIN.Models.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Responses
{
    public class ReviewResponseDTO
    {
        public string Id { get; set; }
        public string ProductId { get; set; }
        public string Title { get; set; }
        public string Subtitle { get; set; }
        public string Content { get; set; }
        public int Rating { get; set; }
        public string ImageUrl { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime UpdatedAt { get; set; }
    }
}

================
File: AutoPile.DOMAIN/DTOs/Responses/ShoppingCartItemResponseDTO.cs
================
using AutoPile.DOMAIN.Models.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Responses
{
    public class ShoppingCartItemResponseDTO
    {
        public int Id { get; set; }
        public string UserId { get; set; }
        public string ProductId { get; set; }
        public int Quantity { get; set; }
        public DateTime CreatedAt { get; set; }
    }
}

================
File: AutoPile.DOMAIN/DTOs/Responses/UserInfoResponseDTO.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Responses
{
    public class UserInfoResponseDTO
    {
        public string LastName { get; set; }
        public string FirstName { get; set; }
        public string PhoneNumber { get; set; }
        public string Email { get; set; }
    }
}

================
File: AutoPile.DOMAIN/DTOs/Responses/UserResponseDTO.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.DTOs.Responses
{
    public class UserResponseDTO
    {
        public string UserName { get; set; }
        public string Email { get; set; }
        public string Token { get; set; }
        public string Id { get; set; }
    }
}

================
File: AutoPile.DOMAIN/Enum/Category.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.Enum
{
    public enum Category
    {
        Accessories = 1,
        VehicleBodyParts = 2,
        WheelsAndRims = 3,
        Engine = 4
    }

}

================
File: AutoPile.DOMAIN/Enum/Ribbon.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.Enum
{
    public enum Ribbon
    {
        Sale, BestSeller, None
    }
}

================
File: AutoPile.DOMAIN/Interface/IAuthService.cs
================
using AutoPile.DOMAIN.DTOs.Requests;
using AutoPile.DOMAIN.DTOs.Responses;
using Microsoft.AspNetCore.Mvc;

namespace AutoPile.SERVICE.Services
{
    public interface IAuthService
    {
        Task<UserResponseDTO> SignupAdminAsync(UserSignupDTO userSignupDTO);

        Task<UserResponseDTO> SignupUserAsync([FromBody] UserSignupDTO userSignupDTO);

        Task<UserResponseDTO> SigninAsync(UserSigninDTO userSigninDTO);

        Task<UserInfoResponseDTO> GetUserInfoAsync(string userId);

        Task<string> SendEmailConfirmationTokenAsync(string email, string userId);

        Task<bool> VerifyEmailConfirmationTokenAsync(string email, string token);

        Task UpdateUserInfoAsync(UserUpdateInfoDTO userUpdateInfoDTO, string userId);

        Task<string> SendResetPasswordTokenAsync(string email);

        Task ResetPasswordAsync(UserResetPasswordDTO userResetPasswordDTO);

        Task ValidatePasswordResetTokenAsync(string email, string token);
    }
}

================
File: AutoPile.DOMAIN/Interface/IBlobService.cs
================
using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.Interface
{
    public interface IBlobService
    {
        Task<string> UploadImageAsync(IFormFile file);

        Task DeleteImageAsync(string imageUrl);

        Task<string> UpdateImageAsync(string oldImageUrl, IFormFile newFile);
    }
}

================
File: AutoPile.DOMAIN/Interface/IExceptionHandler.cs
================
using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.Interface
{
    public interface IExceptionHandler
    {
        public Task HandleExceptionAsync(HttpContext context);
    }
}

================
File: AutoPile.DOMAIN/Interface/IJwtTokenGenerator.cs
================
using AutoPile.DOMAIN.Models.Entities;

namespace AutoPile.SERVICE.Utilities
{
    public interface IJwtTokenGenerator
    {
        string GenerateJwtToken(ApplicationUser user);
    }
}

================
File: AutoPile.DOMAIN/Interface/IProductService.cs
================
using AutoPile.DOMAIN.DTOs.Requests;
using AutoPile.DOMAIN.DTOs.Responses;

namespace AutoPile.SERVICE.Services
{
    public interface IProductService
    {
        Task<ProductResponseDTO> CreateProductAsync(ProductCreateDTO productCreateDTO);

        Task<ProductResponseDTO> GetProductByIdAsync(string id);

        Task DeleteProductByIdAsync(string id);

        Task<ProductResponseDTO> UpdateProductByIdAsync(ProductUpdateDTO productUpdateDTO, string id);
    }
}

================
File: AutoPile.DOMAIN/Interface/IReviewService.cs
================
using AutoPile.DOMAIN.DTOs.Requests;
using AutoPile.DOMAIN.DTOs.Responses;
using MongoDB.Bson;

namespace AutoPile.SERVICE.Services
{
    public interface IReviewService
    {
        Task<ReviewResponseDTO> CreateReviewAsync(ReviewCreateDTO reviewCreateDTO, string applicationUserId);

        Task<ReviewResponseDTO> GetReviewByIdAsync(string ReviewId);

        Task<IEnumerable<ReviewResponseDTO>> GetReviewsByProductIdAsync(string ProductId);

        Task<ReviewResponseDTO> UpdateReviewAsync(ReviewUpdateDTO reviewUpdateDTO, string reviewId, string applicationUserId);

        Task DeleteReviewAsync(string reviewId, string applicationUserId);
    }
}

================
File: AutoPile.DOMAIN/Interface/IShoppingCartItemService.cs
================
using AutoPile.DOMAIN.DTOs.Requests;
using AutoPile.DOMAIN.DTOs.Responses;

namespace AutoPile.SERVICE.Services
{
    public interface IShoppingCartItemService
    {
        Task<ShoppingCartItemResponseDTO> CreateShoppingCartItemAsync(ShoppingCartItemRequestDto shoppingCartItemRequest, string applicationUserId);

        Task DeleteShoppingCartItemAsync(int shoppingCartItemId, string applicationUserId);

        Task<ShoppingCartItemResponseDTO> GetShoppingCartItemById(int shoppingCartItemId, string applicationUserId);

        Task UpdateShoppingCartItemAsync(UpdateShoppingCartItemDto updateShoppingCartItemDto, int shoppingCartItemId, string? applicationUserId);
    }
}

================
File: AutoPile.DOMAIN/Models/ApiResponse.cs
================
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.Models
{
    public static class ApiResponse
    {
        public static IActionResult OkResult(string message = "OK")
        {
            var response = new ApiResponse<object>
            {
                Code = 200,
                Message = message,
                Success = true,
            };
            return new OkObjectResult(response);
        }

        public static IActionResult FailResult(int code = 500, string message = "Failure")
        {
            var response = new ApiResponse<object>
            {
                Code = code,
                Message = message,
                Success = false,
            };
            return new ObjectResult(response);
        }
    }

    public class ApiResponse<T>
    {
        public int Code { get; set; }
        public string Message { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        public T? Data { get; set; }

        public bool Success { get; set; }

        public static IActionResult OkResult(T data, string message = "OK")
        {
            var response = new ApiResponse<T>
            {
                Code = 200,
                Message = message,
                Success = true,
                Data = data,
            };
            return new OkObjectResult(response);
        }

        public static IActionResult OkResult(string message = "OK")
        {
            var response = new ApiResponse<T>
            {
                Code = 200,
                Message = message,
                Success = true,
            };
            return new OkObjectResult(response);
        }

        public static IActionResult FailResult(int code = 500, string message = "Failure")
        {
            var response = new ApiResponse<T>
            {
                Code = code,
                Message = message,
                Success = false
            };
            return new ObjectResult(response) { StatusCode = code };
        }
    }
}

================
File: AutoPile.DOMAIN/Models/Entities/ApplicationRole.cs
================
using Microsoft.AspNetCore.Identity;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.Models.Entities
{
    public class ApplicationRole : IdentityRole
    {
    }
}

================
File: AutoPile.DOMAIN/Models/Entities/ApplicationUser.cs
================
using Microsoft.AspNetCore.Identity;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.Models.Entities
{
    public class ApplicationUser : IdentityUser
    {
        public ApplicationUser()
        {
            Orders = new List<Order>();
            ShoppingCartItems = new List<ShoppingCartItem>();
        }

        public string? EmailVerifyToken { get; set; }
        public DateTime? EmailVerifyTokenCreatedAt { get; set; }
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public ICollection<Order> Orders { get; set; }
        public ICollection<ShoppingCartItem> ShoppingCartItems { get; set; }
    }
}

================
File: AutoPile.DOMAIN/Models/Entities/Order.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.Models.Entities
{
    public class Order
    {
        public Order()
        {
            OrderItems = new List<OrderItem>();
        }

        public int Id { get; set; }
        public string UserId { get; set; }
        public string OrderNumber { get; set; }
        public DateTime OrderDate { get; set; }
        public string Status { get; set; }
        public decimal SubTotal { get; set; }
        public decimal DeliveryFee { get; set; }
        public decimal TotalAmount { get; set; }
        public string PaymentStatus { get; set; }
        public string PaymentMethod { get; set; }
        public string StripeSessionId { get; set; }
        public string ShippingAddress_Line1 { get; set; }
        public string ShippingAddress_Line2 { get; set; }
        public string ShippingAddress_City { get; set; }
        public string ShippingAddress_Country { get; set; }
        public string ShippingAddress_State { get; set; }
        public string ShippingAddress_PostalCode { get; set; }

        [JsonIgnore]
        public ApplicationUser User { get; set; }

        public ICollection<OrderItem> OrderItems { get; set; }
    }
}

================
File: AutoPile.DOMAIN/Models/Entities/OrderItem.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.Models.Entities
{
    public class OrderItem
    {
        public int Id { get; set; }
        public int OrderId { get; set; }
        public string ProductId { get; set; }
        public string ProductName { get; set; }
        public decimal ProductPrice { get; set; }
        public int Quantity { get; set; }
        public decimal TotalPrice { get; set; }

        [JsonIgnore]
        public Order Order { get; set; }
    }
}

================
File: AutoPile.DOMAIN/Models/Entities/Product.cs
================
using AutoPile.DOMAIN.Enum;
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.Models.Entities
{
    public class Product
    {
        public Product()
        {
            ProductMedias = new List<ProductMedia>();
        }

        [BsonId]
        [BsonRepresentation(BsonType.ObjectId)]
        public ObjectId Id { get; set; }

        public string Name { get; set; }
        public string Description { get; set; }
        public string ProductInfo { get; set; }
        public string SKU { get; set; }
        public decimal Price { get; set; }
        public decimal? ComparePrice { get; set; }
        public bool IsInStock { get; set; }
        public int StockQuantity { get; set; }
        public Ribbon Ribbon { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime UpdatedAt { get; set; }
        public List<ProductMedia> ProductMedias { get; set; }

        //public ICollection<OrderItem> OrderItems { get; set; }
        //public ICollection<Review> Reviews { get; set; }
        //public ICollection<ShoppingCartItem> ShoppingCartItems { get; set; }
        public Category Category { get; set; }
    }
}

================
File: AutoPile.DOMAIN/Models/Entities/ProductMedia.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.Models.Entities
{
    public class ProductMedia
    {
        public string Url { get; set; }
        public string FullUrl { get; set; }
        public string MediaType { get; set; }
        public string AltText { get; set; }
        public string Title { get; set; }
        public int Width { get; set; }
        public int Height { get; set; }
    }
}

================
File: AutoPile.DOMAIN/Models/Entities/Review.cs
================
using MongoDB.Bson;
using MongoDB.Bson.Serialization.Attributes;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.Models.Entities
{
    public class Review
    {
        [BsonId]
        [BsonRepresentation(BsonType.ObjectId)]
        public ObjectId Id { get; set; }

        public string UserId { get; set; }
        public ObjectId ProductId { get; set; }
        public string Title { get; set; }
        public string Subtitle { get; set; }
        public string Content { get; set; }
        public int Rating { get; set; }

        //public byte[] Image { get; set; }
        //public string ImageContentType { get; set; }
        public string? ImageUrl { get; set; }

        public DateTime CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
    }
}

================
File: AutoPile.DOMAIN/Models/Entities/ShoppingCartItem.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;

namespace AutoPile.DOMAIN.Models.Entities
{
    public class ShoppingCartItem
    {
        public int Id { get; set; }
        public string UserId { get; set; }
        public string ProductId { get; set; }
        public int Quantity { get; set; }
        public DateTime CreatedAt { get; set; }

        [JsonIgnore]
        public ApplicationUser User { get; set; }
    }
}

================
File: AutoPile.SERVICE/AutoPile.SERVICE.csproj
================
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="AutoMapper" Version="13.0.1" />
    <PackageReference Include="Azure.Storage.Blobs" Version="12.23.0" />
    <PackageReference Include="Resend" Version="0.0.10" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\AutoPile.DATA\AutoPile.DATA.csproj" />
  </ItemGroup>

</Project>

================
File: AutoPile.SERVICE/Services/AuthService.cs
================
using AutoMapper;
using AutoPile.DATA.Exceptions;
using AutoPile.DOMAIN.DTOs.Requests;
using AutoPile.DOMAIN.DTOs.Responses;
using AutoPile.DOMAIN.Models.Entities;
using AutoPile.SERVICE.Utilities;
using DnsClient.Internal;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Resend;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.SERVICE.Services
{
    public class AuthService : IAuthService
    {
        private const int TOKEN_EXPIRY_MINUTES = 15;
        private readonly UserManager<ApplicationUser> _userManager;
        private readonly IMapper _mapper;
        private readonly IJwtTokenGenerator _jwtTokenGenerator;
        private readonly IResend _resend;
        private readonly IConfiguration _configuration;

        public AuthService(UserManager<ApplicationUser> userManager, IConfiguration configuration, IMapper mapper, IJwtTokenGenerator jwtTokenGenerator, IResend resend)
        {
            _userManager = userManager;
            _mapper = mapper;
            _jwtTokenGenerator = jwtTokenGenerator;
            _resend = resend;
            _configuration = configuration;
        }

        public async Task<UserResponseDTO> SignupAdminAsync(UserSignupDTO userSignupDTO)
        {
            var existingUser = await _userManager.FindByEmailAsync(userSignupDTO.Email);
            if (existingUser != null)
            {
                throw new BadRequestException("Email already registered");
            }

            var user = new ApplicationUser
            {
                UserName = userSignupDTO.UserName,
                Email = userSignupDTO.Email,
                FirstName = userSignupDTO.FirstName,
                LastName = userSignupDTO.LastName,
                PhoneNumber = userSignupDTO.PhoneNumber
            };

            var result = await _userManager.CreateAsync(user, userSignupDTO.Password);
            if (!result.Succeeded)
            {
                var errors = result.Errors.Select(e => e.Description);
                throw new BadRequestException($"Failed to create user: {string.Join(", ", errors)}");
            }

            var addToRoleResult = await _userManager.AddToRoleAsync(user, "Admin");
            if (!addToRoleResult.Succeeded)
            {
                var errors = addToRoleResult.Errors.Select(e => e.Description);
                throw new BadRequestException($"Failed to add user to role: {string.Join(", ", errors)}");
            }

            var token = _jwtTokenGenerator.GenerateJwtToken(user);

            var responseDTO = new UserResponseDTO
            {
                Id = user.Id,
                UserName = user.UserName,
                Email = user.Email,
                Token = token
            };

            return responseDTO;
        }

        public async Task<UserResponseDTO> SignupUserAsync(UserSignupDTO userSignupDTO)
        {
            var existingUser = await _userManager.FindByEmailAsync(userSignupDTO.Email);
            if (existingUser != null)
            {
                throw new BadRequestException("Email already registered");
            }

            var user = new ApplicationUser
            {
                UserName = userSignupDTO.UserName,
                Email = userSignupDTO.Email,
                FirstName = userSignupDTO.FirstName,
                LastName = userSignupDTO.LastName,
                PhoneNumber = userSignupDTO.PhoneNumber
            };

            var result = await _userManager.CreateAsync(user, userSignupDTO.Password);
            if (!result.Succeeded)
            {
                var errors = result.Errors.Select(e => e.Description);
                throw new BadRequestException($"Failed to create user: {string.Join(", ", errors)}");
            }

            var addToRoleResult = await _userManager.AddToRoleAsync(user, "User");
            if (!addToRoleResult.Succeeded)
            {
                var errors = addToRoleResult.Errors.Select(e => e.Description);
                throw new BadRequestException($"Failed to add user to role: {string.Join(", ", errors)}");
            }

            var token = _jwtTokenGenerator.GenerateJwtToken(user);

            var responseDTO = new UserResponseDTO
            {
                Id = user.Id,
                UserName = user.UserName,
                Email = user.Email,
                Token = token
            };

            return responseDTO;
        }

        public async Task<UserResponseDTO> SigninAsync(UserSigninDTO userSigninDTO)
        {
            var user = await _userManager.FindByEmailAsync(userSigninDTO.Email);

            if (user != null && await _userManager.CheckPasswordAsync(user, userSigninDTO.Password))
            {
                var token = _jwtTokenGenerator.GenerateJwtToken(user);
                UserResponseDTO userResponseDTO = _mapper.Map<UserResponseDTO>(user);
                userResponseDTO.Token = token;

                return userResponseDTO;
            }
            throw new NotFoundException("Email does not exist or incorrect password");
        }

        public async Task<UserInfoResponseDTO> GetUserInfoAsync(string userId)
        {
            if (string.IsNullOrEmpty(userId))
            {
                throw new BadRequestException("user id is not found");
            }
            var user = await _userManager.FindByIdAsync(userId) ?? throw new NotFoundException($"User with ID {userId} not found");
            UserInfoResponseDTO userInfoResponseDTO = _mapper.Map<UserInfoResponseDTO>(user);
            return userInfoResponseDTO;
        }

        public async Task<string> SendEmailConfirmationTokenAsync(string email, string userId)
        {
            if (string.IsNullOrEmpty(email))
            {
                throw new BadRequestException("Email is required");
            }
            var user = await _userManager.FindByEmailAsync(email) ?? throw new NotFoundException($"User with email {email} not found");
            if (user.Id != userId)
            {
                throw new ForbiddenException();
            }
            var isConfirmed = await _userManager.IsEmailConfirmedAsync(user);
            if (isConfirmed)
            {
                throw new BadRequestException("This email is already confirmed");
            }
            if (user.EmailVerifyTokenCreatedAt.HasValue &&
        DateTime.UtcNow < user.EmailVerifyTokenCreatedAt.Value.AddMinutes(TOKEN_EXPIRY_MINUTES))
            {
                throw new BadRequestException($"A confirmation link has already been sent. Please wait {TOKEN_EXPIRY_MINUTES} minutes before requesting a new one.");
            }
            var token = await _userManager.GenerateEmailConfirmationTokenAsync(user);

            user.EmailVerifyToken = token;
            user.EmailVerifyTokenCreatedAt = DateTime.UtcNow;
            await _userManager.UpdateAsync(user);

            var emailConfirmationUrl = $"{Environment.GetEnvironmentVariable("DOMAIN") ?? _configuration["Domain"]}/Auth/VerifyEmailConfirmationLink?token={Uri.EscapeDataString(token)}&email={Uri.EscapeDataString(email)}";
            var message = new EmailMessage();
            message.From = "Emailconfirm@autopile.store";
            message.To.Add(email);
            message.Subject = "Email Confirmation Link";
            message.HtmlBody = $@"
                <p>Hello,</p>
                <p>Please click the link below to verify your email:</p>
                <p><a href='{emailConfirmationUrl}'>Email confirmation link</a></p>
                <p>If you did not sign up, please ignore this email.</p>"; ;

            await _resend.EmailSendAsync(message);
            return token.ToString();
        }

        public async Task<bool> VerifyEmailConfirmationTokenAsync(string token, string email)
        {
            if (string.IsNullOrEmpty(email) || string.IsNullOrEmpty(token))
            {
                return false;
            }
            var user = await _userManager.FindByEmailAsync(email) ?? throw new NotFoundException($"User with email {email} not found");

            if (await _userManager.IsEmailConfirmedAsync(user))
            {
                return false;
            }
            if (user.EmailVerifyToken != token)
            {
                return false;
            }

            if (!user.EmailVerifyTokenCreatedAt.HasValue ||
        DateTime.UtcNow > user.EmailVerifyTokenCreatedAt.Value.AddMinutes(TOKEN_EXPIRY_MINUTES))
            {
                return false;
            }

            var result = await _userManager.ConfirmEmailAsync(user, token);
            if (result.Succeeded)
            {
                user.EmailVerifyToken = null;
                user.EmailVerifyTokenCreatedAt = null;
                await _userManager.UpdateAsync(user);
            }

            return result.Succeeded;
        }

        public async Task UpdateUserInfoAsync(UserUpdateInfoDTO userUpdateInfoDTO, string userId)
        {
            if (userId == null)
            {
                throw new NotFoundException("User ID not found in token.");
            }

            var user = await _userManager.FindByIdAsync(userId) ?? throw new NotFoundException("User not found");
            _mapper.Map(userUpdateInfoDTO, user);
            await _userManager.UpdateAsync(user);
        }

        public async Task<string> SendResetPasswordTokenAsync(string email)
        {
            if (string.IsNullOrEmpty(email))
            {
                throw new BadRequestException("email is required");
            }
            var user = await _userManager.FindByEmailAsync(email) ?? throw new NotFoundException($"User with email {email} not found");
            //if (user.Id != userId)
            //{
            //    throw new ForbiddenException();
            //}
            var token = await _userManager.GeneratePasswordResetTokenAsync(user);

            var emailConfirmationUrl = $"https://www.autopile.store/reset-password?token={Uri.EscapeDataString(token)}&email={Uri.EscapeDataString(email)}";
            var message = new EmailMessage();
            message.From = "PasswordReset@autopile.store";
            message.To.Add(email);
            message.Subject = "Password Reset Link";
            message.HtmlBody = $@"
                <p>Hello,</p>
                <p>Please click the link below to Reset your password:</p>
                <p><a href='{emailConfirmationUrl}'>Password Reset link</a></p>
                <p>If you did not request password reset, please ignore this email.</p>"; ;

            await _resend.EmailSendAsync(message);
            return token.ToString();
        }

        public async Task ResetPasswordAsync(UserResetPasswordDTO userResetPasswordDTO)
        {
            var user = await _userManager.FindByEmailAsync(userResetPasswordDTO.Email) ?? throw new NotFoundException($"User with email {userResetPasswordDTO.Email} not found");

            var result = await _userManager.ResetPasswordAsync(user, userResetPasswordDTO.EmailVerifyToken, userResetPasswordDTO.NewPassword);
            if (!result.Succeeded)
            {
                var errors = string.Join(", ", result.Errors.Select(e => e.Description));
                throw new BadRequestException($"Password reset failed: {errors}");
            }
        }

        public async Task ValidatePasswordResetTokenAsync(string email, string token)
        {
            if (string.IsNullOrEmpty(email) || string.IsNullOrEmpty(token))
            {
                throw new BadRequestException("Email and token are required");
            }

            var user = await _userManager.FindByEmailAsync(email)
                ?? throw new NotFoundException($"User with email {email} not found");

            bool isValid = await _userManager.VerifyUserTokenAsync(
                user,
                _userManager.Options.Tokens.PasswordResetTokenProvider,
                UserManager<IdentityUser>.ResetPasswordTokenPurpose,
                token
            );
            if (!isValid)
            {
                throw new BadRequestException("Token expired or invalid");
            }
        }
    }
}

================
File: AutoPile.SERVICE/Services/BlobService.cs
================
using AutoPile.DATA.Exceptions;
using AutoPile.DOMAIN.Interface;
using Azure.Storage.Blobs;
using Azure.Storage.Blobs.Models;
using Azure.Storage.Sas;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.SERVICE.Services
{
    public class BlobService : IBlobService
    {
        private readonly BlobServiceClient _blobServiceClient;
        private readonly string _containerName = "reviews";

        public BlobService(IConfiguration configuration)
        {
            string connectionString = Environment.GetEnvironmentVariable("BlobStorage") ?? configuration["Azure:BlobStorage:ConnectionString"]
        ?? throw new InvalidOperationException("Blob storage connection string not configured");
            _blobServiceClient = new BlobServiceClient(connectionString);
        }

        public async Task<string> UploadImageAsync(IFormFile file)
        {
            var containerClient = _blobServiceClient.GetBlobContainerClient(_containerName);
            await containerClient.CreateIfNotExistsAsync();

            // Create unique blob name
            string blobName = $"{Guid.NewGuid()}{Path.GetExtension(file.FileName)}";
            var blobClient = containerClient.GetBlobClient(blobName);

            // Upload the file
            using var stream = file.OpenReadStream();
            await blobClient.UploadAsync(stream, new BlobHttpHeaders { ContentType = file.ContentType });

            // Generate SAS token
            var sasBuilder = new BlobSasBuilder
            {
                BlobContainerName = _containerName,
                BlobName = blobName,
                Resource = "b", // b for blob
                StartsOn = DateTimeOffset.UtcNow,
                ExpiresOn = DateTimeOffset.UtcNow.AddYears(1), // Or your preferred expiration
            };
            sasBuilder.SetPermissions(BlobSasPermissions.Read); // Only allow read

            var sasToken = blobClient.GenerateSasUri(sasBuilder).ToString();
            return sasToken; // This will return the full URL with SAS token
        }

        public async Task DeleteImageAsync(string imageUrl)
        {
            var containerClient = _blobServiceClient.GetBlobContainerClient(_containerName);
            var uri = new Uri(imageUrl);
            string blobName = Path.GetFileName(uri.LocalPath);
            var blobClient = containerClient.GetBlobClient(blobName);
            await blobClient.DeleteIfExistsAsync();
        }

        public async Task<string> UpdateImageAsync(string oldImageUrl, IFormFile newFile)
        {
            if (newFile == null)
            {
                throw new BadRequestException("Empty file");
            }

            if (!string.IsNullOrEmpty(oldImageUrl))
            {
                await DeleteImageAsync(oldImageUrl);
            }

            return await UploadImageAsync(newFile);
        }
    }
}

================
File: AutoPile.SERVICE/Services/ProductService.cs
================
using AutoMapper;
using AutoPile.DATA.Data;
using AutoPile.DATA.Exceptions;
using AutoPile.DOMAIN.DTOs.Requests;
using AutoPile.DOMAIN.DTOs.Responses;
using AutoPile.DOMAIN.Models.Entities;
using MongoDB.Bson;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.SERVICE.Services
{
    public class ProductService : IProductService
    {
        private readonly AutoPileMongoDbContext _autoPileMongoDbContext;
        private readonly IMapper _mapper;

        public ProductService(AutoPileMongoDbContext autoPileMongoDbContext, IMapper mapper)
        {
            _autoPileMongoDbContext = autoPileMongoDbContext;
            _mapper = mapper;
        }

        public async Task<ProductResponseDTO> CreateProductAsync(ProductCreateDTO productCreateDTO)
        {
            var existingProduct = _autoPileMongoDbContext.Products.FirstOrDefault(p => p.SKU == productCreateDTO.SKU);
            if (existingProduct != null)
            {
                throw new BadRequestException($"Product with SKU {productCreateDTO.SKU} already exists");
            }
            var product = _mapper.Map<Product>(productCreateDTO);
            product.CreatedAt = DateTime.UtcNow;
            product.UpdatedAt = DateTime.UtcNow;

            await _autoPileMongoDbContext.Products.AddAsync(product);
            await _autoPileMongoDbContext.SaveChangesAsync();
            return _mapper.Map<ProductResponseDTO>(product);
        }

        public async Task<ProductResponseDTO> GetProductByIdAsync(string id)
        {
            if (!ObjectId.TryParse(id, out ObjectId productObjectId))
            {
                throw new BadRequestException("Invalid product ID format");
            }
            var product = await _autoPileMongoDbContext.Products.FindAsync(productObjectId) ?? throw new NotFoundException($"Product with Id {id} not found");
            return _mapper.Map<ProductResponseDTO>(product);
        }

        public async Task DeleteProductByIdAsync(string id)
        {
            if (!ObjectId.TryParse(id, out ObjectId productObjectId))
            {
                throw new BadRequestException("Invalid product ID format");
            }
            var product = await _autoPileMongoDbContext.Products.FindAsync(productObjectId) ?? throw new NotFoundException($"Product with Id {id} not found");
            _autoPileMongoDbContext.Remove(product);
            await _autoPileMongoDbContext.SaveChangesAsync();
        }

        public async Task<ProductResponseDTO> UpdateProductByIdAsync(ProductUpdateDTO productUpdateDTO, string id)
        {
            if (!ObjectId.TryParse(id, out ObjectId productObjectId))
            {
                throw new BadRequestException("Invalid product ID format");
            }

            var product = await _autoPileMongoDbContext.Products.FindAsync(productObjectId)
                ?? throw new NotFoundException($"Product with Id {id} not found");

            if (productUpdateDTO.Name != null)
                product.Name = productUpdateDTO.Name;
            if (productUpdateDTO.Description != null)
                product.Description = productUpdateDTO.Description;
            if (productUpdateDTO.ProductInfo != null)
                product.ProductInfo = productUpdateDTO.ProductInfo;
            if (productUpdateDTO.SKU != null)
                product.SKU = productUpdateDTO.SKU;
            if (productUpdateDTO.Price.HasValue)
                product.Price = productUpdateDTO.Price.Value;
            if (productUpdateDTO.ComparePrice.HasValue)
                product.ComparePrice = productUpdateDTO.ComparePrice.Value;
            if (productUpdateDTO.IsInStock.HasValue)
                product.IsInStock = productUpdateDTO.IsInStock.Value;
            if (productUpdateDTO.StockQuantity.HasValue)
                product.StockQuantity = productUpdateDTO.StockQuantity.Value;
            if (productUpdateDTO.Ribbon.HasValue)
                product.Ribbon = productUpdateDTO.Ribbon.Value;
            if (productUpdateDTO.Category.HasValue)
                product.Category = productUpdateDTO.Category.Value;
            if (productUpdateDTO.ProductMedias != null)
                product.ProductMedias = _mapper.Map<List<ProductMedia>>(productUpdateDTO.ProductMedias);

            product.UpdatedAt = DateTime.UtcNow;

            _autoPileMongoDbContext.Update(product);
            await _autoPileMongoDbContext.SaveChangesAsync();

            return _mapper.Map<ProductResponseDTO>(product);
        }
    }
}

================
File: AutoPile.SERVICE/Services/ReviewService.cs
================
using AutoMapper;
using AutoPile.DATA.Data;
using AutoPile.DATA.Exceptions;
using AutoPile.DOMAIN.DTOs.Requests;
using AutoPile.DOMAIN.DTOs.Responses;
using AutoPile.DOMAIN.Interface;
using AutoPile.DOMAIN.Models.Entities;
using Microsoft.EntityFrameworkCore;
using MongoDB.Bson;

namespace AutoPile.SERVICE.Services
{
    public class ReviewService : IReviewService
    {
        private readonly IMapper _mapper;
        private readonly AutoPileMongoDbContext _autoPileMongoDbContext;
        private readonly AutoPileManagementDbContext _autoPileManagementDbContext;
        private readonly IBlobService _blobService;

        public ReviewService(IMapper mapper, IBlobService blobService, AutoPileMongoDbContext autoPileMongoDbContext, AutoPileManagementDbContext autoPileManagementDbContext)
        {
            _mapper = mapper;
            _autoPileMongoDbContext = autoPileMongoDbContext;
            _autoPileManagementDbContext = autoPileManagementDbContext;
            _blobService = blobService;
        }

        public async Task<ReviewResponseDTO> CreateReviewAsync(ReviewCreateDTO reviewCreateDTO, string applicationUserId)
        {
            if (string.IsNullOrEmpty(applicationUserId))
            {
                throw new BadRequestException("User Id is null");
            }

            var user = await _autoPileManagementDbContext.Users.FindAsync(applicationUserId);
            if (user == null)
            {
                throw new NotFoundException($"User with ID {applicationUserId} not found");
            }

            if (!ObjectId.TryParse(reviewCreateDTO.ProductId, out ObjectId productObjectId))
            {
                throw new BadRequestException("Invalid product ID format");
            }

            var product = await _autoPileMongoDbContext.Products.FindAsync(productObjectId);
            if (product == null)
            {
                throw new NotFoundException($"Product with ID {reviewCreateDTO.ProductId} not found");
            }

            var review = _mapper.Map<Review>(reviewCreateDTO);
            review.UserId = user.Id;

            if (reviewCreateDTO.Image != null)
            {
                review.ImageUrl = await _blobService.UploadImageAsync(reviewCreateDTO.Image);
            }

            await _autoPileMongoDbContext.Reviews.AddAsync(review);
            await _autoPileMongoDbContext.SaveChangesAsync();

            var reviewResponseDto = _mapper.Map<ReviewResponseDTO>(review);

            return reviewResponseDto;
        }

        public async Task<ReviewResponseDTO> GetReviewByIdAsync(string ReviewId)
        {
            if (!ObjectId.TryParse(ReviewId, out ObjectId reviewObjectId))
            {
                throw new BadRequestException("Invalid product ID format");
            }
            var review = await _autoPileMongoDbContext.Reviews.FindAsync(reviewObjectId) ?? throw new NotFoundException($"Review with ID {ReviewId} not found");
            return _mapper.Map<ReviewResponseDTO>(review);
        }

        public async Task<IEnumerable<ReviewResponseDTO>> GetReviewsByProductIdAsync(string ProductId)
        {
            if (!ObjectId.TryParse(ProductId, out ObjectId productObjectId))
            {
                throw new BadRequestException("Invalid product ID format");
            }
            _ = await _autoPileMongoDbContext.Products.FindAsync(productObjectId) ?? throw new NotFoundException($"Product with ID {ProductId} not found");
            var reviews = await _autoPileMongoDbContext.Reviews.Where(r => r.ProductId == productObjectId).ToListAsync();
            return _mapper.Map<IEnumerable<ReviewResponseDTO>>(reviews);
        }

        public async Task<ReviewResponseDTO> UpdateReviewAsync(ReviewUpdateDTO reviewUpdateDTO, string reviewId, string applicationUserId)
        {
            _ = await _autoPileManagementDbContext.Users.FindAsync(applicationUserId)
                ?? throw new NotFoundException($"User with ID {applicationUserId} not found");

            if (!ObjectId.TryParse(reviewId, out ObjectId reviewObjectId))
            {
                throw new BadRequestException("Invalid product ID format");
            }

            var review = await _autoPileMongoDbContext.Reviews.FindAsync(reviewObjectId)
                ?? throw new NotFoundException($"Review with ID {reviewId} not found");

            if (review.UserId != applicationUserId)
            {
                throw new ForbiddenException("You are not authorized to update this review");
            }

            if (reviewUpdateDTO.Title != null)
                review.Title = reviewUpdateDTO.Title;
            if (reviewUpdateDTO.Subtitle != null)
                review.Subtitle = reviewUpdateDTO.Subtitle;
            if (reviewUpdateDTO.Content != null)
                review.Content = reviewUpdateDTO.Content;
            if (reviewUpdateDTO.Rating.HasValue)
                review.Rating = reviewUpdateDTO.Rating.Value;

            if (reviewUpdateDTO.Image != null)
            {
                var oldImageUrl = review.ImageUrl;
                if (string.IsNullOrEmpty(oldImageUrl))
                {
                    review.ImageUrl = await _blobService.UploadImageAsync(reviewUpdateDTO.Image);
                }
                else
                {
                    review.ImageUrl = await _blobService.UpdateImageAsync(oldImageUrl, reviewUpdateDTO.Image);
                }
            }
            review.UpdatedAt = DateTime.UtcNow;
            _autoPileMongoDbContext.Update(review);
            await _autoPileMongoDbContext.SaveChangesAsync();
            return _mapper.Map<ReviewResponseDTO>(review);
        }

        public async Task DeleteReviewAsync(string reviewId, string applicationUserId)
        {
            _ = await _autoPileManagementDbContext.Users.FindAsync(applicationUserId)
                ?? throw new NotFoundException($"User with ID {applicationUserId} not found");
            if (!ObjectId.TryParse(reviewId, out ObjectId reviewObjectId))
            {
                throw new BadRequestException("Invalid product ID format");
            }
            var review = await _autoPileMongoDbContext.Reviews.FindAsync(reviewObjectId)
               ?? throw new NotFoundException($"Review with ID {reviewId} not found");
            if (review.UserId != applicationUserId)
            {
                throw new ForbiddenException("You are not authorized to delete this review");
            }
            if (review.ImageUrl != null) { await _blobService.DeleteImageAsync(review.ImageUrl); }
            _autoPileMongoDbContext.Remove(review);
            await _autoPileMongoDbContext.SaveChangesAsync();
        }
    }
}

================
File: AutoPile.SERVICE/Services/ShoppingCartItemService.cs
================
using AutoMapper;
using AutoPile.DATA.Data;
using AutoPile.DATA.Exceptions;
using AutoPile.DOMAIN.DTOs.Requests;
using AutoPile.DOMAIN.DTOs.Responses;
using AutoPile.DOMAIN.Models.Entities;
using MongoDB.Bson;

namespace AutoPile.SERVICE.Services
{
    public class ShoppingCartItemService : IShoppingCartItemService
    {
        private readonly IMapper _mapper;
        private readonly AutoPileManagementDbContext _context;
        private readonly AutoPileMongoDbContext _mongoContext;

        public ShoppingCartItemService(IMapper mapper, AutoPileManagementDbContext context, AutoPileMongoDbContext mongoContext)
        {
            _mapper = mapper;
            _context = context;
            _mongoContext = mongoContext;
        }

        public async Task<ShoppingCartItemResponseDTO> CreateShoppingCartItemAsync(ShoppingCartItemRequestDto shoppingCartItemRequest, string applicationUserId)
        {
            if (string.IsNullOrEmpty(applicationUserId))
            {
                throw new BadRequestException("User Id is null");
            }
            var user = await _context.Users.FindAsync(applicationUserId) ?? throw new NotFoundException($"User with ID {applicationUserId} not found");
            if (!ObjectId.TryParse(shoppingCartItemRequest.ProductId, out ObjectId productObjectId))
            {
                throw new BadRequestException("Invalid product ID format");
            }
            _ = await _mongoContext.Products.FindAsync(productObjectId)
                ?? throw new NotFoundException($"Product with ID {shoppingCartItemRequest.ProductId} not found");
            var shoppingCartItem = _mapper.Map<ShoppingCartItem>(shoppingCartItemRequest);
            shoppingCartItem.UserId = applicationUserId;
            shoppingCartItem.CreatedAt = DateTime.UtcNow;
            await _context.ShoppingCartItems.AddAsync(shoppingCartItem);
            await _context.SaveChangesAsync();
            var shoppingCartItemDTO = _mapper.Map<ShoppingCartItemResponseDTO>(shoppingCartItem);
            return shoppingCartItemDTO;
        }

        public async Task DeleteShoppingCartItemAsync(int shoppingCartItemId, string applicationUserId)
        {
            var shoppingCartItem = await _context.ShoppingCartItems.FindAsync(shoppingCartItemId) ?? throw new NotFoundException($"Shopping cart item with Id {shoppingCartItemId} is not found");
            if (shoppingCartItem.UserId != applicationUserId)
            {
                throw new ForbiddenException("You are not authorized to delete this shopping cart item");
            }
            _context.ShoppingCartItems.Remove(shoppingCartItem);
            await _context.SaveChangesAsync();
            return;
        }

        public async Task<ShoppingCartItemResponseDTO> GetShoppingCartItemById(int shoppingCartItemId, string applicationUserId)
        {
            var shoppingCartItem = await _context.ShoppingCartItems.FindAsync(shoppingCartItemId) ?? throw new NotFoundException($"Shopping cart item with Id {shoppingCartItemId} is not found");
            if (shoppingCartItem.UserId != applicationUserId)
            {
                throw new ForbiddenException("You are not authorized to see this shopping cart item");
            }
            return _mapper.Map<ShoppingCartItemResponseDTO>(shoppingCartItem);
        }

        public async Task UpdateShoppingCartItemAsync(UpdateShoppingCartItemDto updateShoppingCartItemDto, int shoppingCartItemId, string? applicationUserId)
        {
            if (string.IsNullOrEmpty(applicationUserId))
            {
                throw new BadRequestException("User Id is null");
            }
            var user = await _context.Users.FindAsync(applicationUserId) ?? throw new NotFoundException($"User with ID {applicationUserId} not found");
            var shoppingCartItem = await _context.ShoppingCartItems.FindAsync(shoppingCartItemId) ?? throw new NotFoundException($"Shopping cart item with Id {shoppingCartItemId} is not found");
            if (shoppingCartItem.UserId != applicationUserId)
            {
                throw new ForbiddenException("You are not authorized to modify this shopping cart item");
            }
            _mapper.Map(updateShoppingCartItemDto, shoppingCartItem);
            _context.ShoppingCartItems.Update(shoppingCartItem);
            await _context.SaveChangesAsync();
        }
    }
}

================
File: AutoPile.SERVICE/Utilities/EmailConfirmationHtmlTemplates.cs
================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutoPile.SERVICE.Utilities
{
    public static class EmailConfirmationHtmlTemplates
    {
        public static string GetEmailConfirmationHtml(bool isConfirmed) => isConfirmed
            ? SuccessTemplate
            : ErrorTemplate;

        private static string SuccessTemplate => @"
        <!DOCTYPE html>
        <html>
        <head>
            <title>Email Confirmation</title>
            <style>
                body {
                    margin: 0;
                    padding: 0;
                    min-height: 100vh;
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    display: flex;
                    justify-content: center;
                    align-items: center;
                }
                .container {
                    background: rgba(255, 255, 255, 0.95);
                    padding: 2.5rem 3rem;
                    border-radius: 20px;
                    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
                    text-align: center;
                    max-width: 500px;
                    width: 90%;
                    transform: translateY(-20px);
                    animation: slideUp 0.5s ease forwards;
                }
                @keyframes slideUp {
                    to {
                        transform: translateY(0);
                        opacity: 1;
                    }
                }
                .icon {
                    width: 80px;
                    height: 80px;
                    background: #4CAF50;
                    border-radius: 50%;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    margin: 0 auto 1.5rem;
                }
                .icon svg {
                    width: 40px;
                    height: 40px;
                    fill: white;
                }
                h1 {
                    color: #2d3748;
                    margin: 0 0 1rem;
                    font-size: 1.8rem;
                    font-weight: 600;
                }
                p {
                    color: #718096;
                    line-height: 1.6;
                    margin: 0;
                    font-size: 1.1rem;
                }
            </style>
        </head>
        <body>
            <div class='container'>
                <div class='icon'>
                    <svg viewBox='0 0 24 24'>
                        <path d='M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z'/>
                    </svg>
                </div>
                <h1>Email Verified!</h1>
                <p>Your email address has been successfully verified.</p>
                <p>You can now close this window and continue using AutoPile.</p>
            </div>
        </body>
        </html>";

        private static string ErrorTemplate => @"
        <!DOCTYPE html>
        <html>
        <head>
            <title>Email Confirmation Failed</title>
            <style>
                body {
                    margin: 0;
                    padding: 0;
                    min-height: 100vh;
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    background: linear-gradient(135deg, #fc8181 0%, #f56565 100%);
                    display: flex;
                    justify-content: center;
                    align-items: center;
                }
                .container {
                    background: rgba(255, 255, 255, 0.95);
                    padding: 2.5rem 3rem;
                    border-radius: 20px;
                    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
                    text-align: center;
                    max-width: 450px;
                    width: 90%;
                    transform: translateY(-20px);
                    animation: slideUp 0.5s ease forwards;
                }
                @keyframes slideUp {
                    to {
                        transform: translateY(0);
                        opacity: 1;
                    }
                }
                .icon {
                    width: 80px;
                    height: 80px;
                    background: #f56565;
                    border-radius: 50%;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    margin: 0 auto 1.5rem;
                }
                .icon svg {
                    width: 40px;
                    height: 40px;
                    fill: white;
                }
                h1 {
                    color: #2d3748;
                    margin: 0 0 1rem;
                    font-size: 1.8rem;
                    font-weight: 600;
                }
                p {
                    color: #718096;
                    line-height: 1.6;
                    margin: 0;
                    font-size: 1.1rem;
                }
            </style>
        </head>
        <body>
            <div class='container'>
                <div class='icon'>
                    <svg viewBox='0 0 24 24'>
                        <path d='M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z'/>
                    </svg>
                </div>
                <h1>Verification Failed</h1>
                <p>The verification link appears to be invalid or has expired.</p>
                <p>Please request a new verification email and try again.</p>
                <p>Alternatively, you might have already verified your email.</p>
            </div>
        </body>
        </html>";
    }
}

================
File: AutoPile.SERVICE/Utilities/JwtTokenGenerator.cs
================
using AutoPile.DOMAIN.Models.Entities;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace AutoPile.SERVICE.Utilities
{
    public class JwtTokenGenerator : IJwtTokenGenerator
    {
        private readonly IConfiguration _configuration;
        private readonly UserManager<ApplicationUser> _userManager;

        public JwtTokenGenerator(IConfiguration configuration, UserManager<ApplicationUser> userManager)
        {
            _configuration = configuration;
            _userManager = userManager;
        }

        public string GenerateJwtToken(ApplicationUser user)
        {
            var claims = new List<Claim>
            {
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
                new Claim(ClaimTypes.NameIdentifier, user.Id),
            };
            var roles = _userManager.GetRolesAsync(user).Result;
            foreach (var role in roles)
            {
                claims.Add(new Claim(ClaimTypes.Role, role));
            }
            string scope = roles.Contains("Admin") ? "admin" : "user";
            claims.Add(new Claim("scope", scope));
            var jwtKey = Environment.GetEnvironmentVariable("JWTKEY") ?? _configuration["Jwt:Key"];
            if (string.IsNullOrWhiteSpace(jwtKey))
            {
                throw new InvalidOperationException("JWT Key is not configured. Please set the 'JWTKEY' environment variable or provide a valid key in appsettings.json.");
            }
            var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtKey));
            var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

            var token = new JwtSecurityToken(
                issuer: Environment.GetEnvironmentVariable("ISSUER") ?? _configuration["Jwt:Issuer"],
                audience: Environment.GetEnvironmentVariable("AUDIENCE") ?? _configuration["Jwt:Audience"],
                claims: claims,
                expires: DateTime.Now.AddMinutes(30),
                signingCredentials: creds
            );
            return new JwtSecurityTokenHandler().WriteToken(token);
        }
    }
}

================
File: AutoPile.sln
================
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.12.35527.113
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "AutoPile.DATA", "AutoPile.DATA\AutoPile.DATA.csproj", "{533EABB9-3898-4040-925E-17DD47E8F5D5}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "AutoPile.DOMAIN", "AutoPile.DOMAIN\AutoPile.DOMAIN.csproj", "{CA080B5B-82EF-47AC-BC4C-B798D3FBFD7B}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "AutoPile.SERVICE", "AutoPile.SERVICE\AutoPile.SERVICE.csproj", "{2FB5F0EF-1D1E-472D-B0B1-4C5B5005E239}"
EndProject
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "AutoPile.API", "AutoPile.API\AutoPile.API.csproj", "{3DDF33AA-990E-4BA9-AC47-29E2EB706D0C}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{533EABB9-3898-4040-925E-17DD47E8F5D5}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{533EABB9-3898-4040-925E-17DD47E8F5D5}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{533EABB9-3898-4040-925E-17DD47E8F5D5}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{533EABB9-3898-4040-925E-17DD47E8F5D5}.Release|Any CPU.Build.0 = Release|Any CPU
		{CA080B5B-82EF-47AC-BC4C-B798D3FBFD7B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{CA080B5B-82EF-47AC-BC4C-B798D3FBFD7B}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{CA080B5B-82EF-47AC-BC4C-B798D3FBFD7B}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{CA080B5B-82EF-47AC-BC4C-B798D3FBFD7B}.Release|Any CPU.Build.0 = Release|Any CPU
		{2FB5F0EF-1D1E-472D-B0B1-4C5B5005E239}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{2FB5F0EF-1D1E-472D-B0B1-4C5B5005E239}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{2FB5F0EF-1D1E-472D-B0B1-4C5B5005E239}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{2FB5F0EF-1D1E-472D-B0B1-4C5B5005E239}.Release|Any CPU.Build.0 = Release|Any CPU
		{3DDF33AA-990E-4BA9-AC47-29E2EB706D0C}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{3DDF33AA-990E-4BA9-AC47-29E2EB706D0C}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{3DDF33AA-990E-4BA9-AC47-29E2EB706D0C}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{3DDF33AA-990E-4BA9-AC47-29E2EB706D0C}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
EndGlobal
